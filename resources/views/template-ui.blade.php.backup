<x-layouts.app :title="__('Template UI Editor')">
    <div class="flex h-full w-full flex-1 flex-col" 
         x-data="templateEditor()" 
         x-init="init()">
        
        <!-- Navigation & Header -->
        <div class="main-navigation flex items-center justify-between border-b border-neutral-200 p-6 dark:border-neutral-700">
            <flux:navbar scrollable>
                <flux:navbar.item href="{{ route('template-management') }}">Overview</flux:navbar.item>
                <flux:navbar.item href="{{ route('template-ui') }}" :current="request()->routeIs('template-ui')">UI</flux:navbar.item>
                <flux:navbar.item href="{{ route('templates') }}">Templates</flux:navbar.item>
            </flux:navbar>

            <div class="flex items-center gap-3">
                <!-- Preview Mode Toggle -->
                <div class="flex items-center gap-1 rounded-lg border border-neutral-200 p-1 dark:border-neutral-700">
                    <button @click="previewMode = 'desktop'" 
                            :class="previewMode === 'desktop' ? 'bg-neutral-900 text-white dark:bg-white dark:text-neutral-900' : 'text-neutral-600 hover:text-neutral-900 dark:text-neutral-400 dark:hover:text-neutral-100'" 
                            class="rounded px-3 py-1 text-sm font-medium transition-colors">
                        <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <rect x="2" y="4" width="20" height="16" rx="2"/>
                            <path d="M2 8h20"/>
                        </svg>
                    </button>
                    <button @click="previewMode = 'tablet'" 
                            :class="previewMode === 'tablet' ? 'bg-neutral-900 text-white dark:bg-white dark:text-neutral-900' : 'text-neutral-600 hover:text-neutral-900 dark:text-neutral-400 dark:hover:text-neutral-100'" 
                            class="rounded px-3 py-1 text-sm font-medium transition-colors">
                        <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <rect x="5" y="2" width="14" height="20" rx="2"/>
                            <path d="M9 22h6"/>
                        </svg>
                    </button>
                    <button @click="previewMode = 'mobile'" 
                            :class="previewMode === 'mobile' ? 'bg-neutral-900 text-white dark:bg-white dark:text-neutral-900' : 'text-neutral-600 hover:text-neutral-900 dark:text-neutral-400 dark:hover:text-neutral-100'" 
                            class="rounded px-3 py-2 text-sm font-medium transition-colors">
                        <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <rect x="7" y="2" width="10" height="20" rx="2"/>
                            <path d="M11 18h2"/>
                        </svg>
                    </button>
                </div>

                <flux:button x-show="!isPreviewMode" variant="subtle" @click="showComponentLibrary = !showComponentLibrary">
                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"/>
                    </svg>
                    <span x-text="showComponentLibrary ? '{{ __('Hide Components') }}' : '{{ __('Show Components') }}'"></span>
                </flux:button>

                <flux:button x-show="!isPreviewMode" variant="subtle" @click="showPropertiesPanel = !showPropertiesPanel">
                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                    <span x-text="showPropertiesPanel ? '{{ __('Hide Properties') }}' : '{{ __('Show Properties') }}'"></span>
                </flux:button>

                <flux:button variant="filled" icon="eye" @click="togglePreviewMode()">
                    <span x-text="isPreviewMode ? '{{ __('Edit') }}' : '{{ __('Preview') }}'"></span>
                </flux:button>

                <flux:modal.trigger x-show="!isPreviewMode" name="publish-template-modal">
                    <flux:button variant="primary" icon="check">
                        {{ __('Publish') }}
                    </flux:button>
                </flux:modal.trigger>
            </div>
        </div>

        <div class="flex flex-1 overflow-hidden">
            <!-- Pages Sidebar -->
            <div x-show="!isPreviewMode" class="pages-sidebar w-64 border-r border-neutral-200 bg-white dark:border-neutral-700 dark:bg-neutral-900">
                <div class="p-4">
                    <div class="flex items-center justify-between mb-4">
                        <flux:heading size="sm">{{ __('Pages') }}</flux:heading>
                        <flux:modal.trigger x-show="!isPreviewMode" name="create-page-modal">
                            <flux:button variant="subtle" size="sm" icon="plus">
                                {{ __('Add Page') }}
                            </flux:button>
                        </flux:modal.trigger>
                    </div>
                    
                    <div class="space-y-2">
                        <template x-for="page in pages" :key="page.id">
                            <div @click="!isPreviewMode && selectPage(page)" 
                                 :class="selectedPage?.id === page.id ? 'bg-blue-50 border-blue-200 dark:bg-blue-900/20 dark:border-blue-800' : 'bg-white dark:bg-neutral-800 hover:bg-neutral-50 dark:hover:bg-neutral-700'" 
                                 :class="isPreviewMode ? 'cursor-default' : 'cursor-pointer'"
                                 class="rounded-lg border border-neutral-200 p-3 transition-colors dark:border-neutral-700">
                                <div class="flex items-center justify-between">
                                    <div class="flex-1 min-w-0">
                                        <flux:text class="text-sm font-medium" x-text="page.name"></flux:text>
                                        <flux:text class="text-xs text-neutral-500 dark:text-neutral-400" x-text="page.description"></flux:text>
                                    </div>
                                    <div class="flex items-center gap-1">
                                        <button x-show="!isPreviewMode" @click.stop="duplicatePage(page)" class="p-1 text-neutral-400 hover:text-neutral-600 dark:hover:text-neutral-300">
                                            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                                            </svg>
                                        </button>
                                        <button x-show="!isPreviewMode" @click.stop="deletePage(page)" class="p-1 text-neutral-400 hover:text-red-600 dark:hover:text-red-400">
                                            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                            </svg>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </template>
                    </div>
                </div>
            </div>

            <!-- Component Library Sidebar -->
            <div x-show="showComponentLibrary && !isPreviewMode" class="component-library w-64 border-r border-neutral-200 bg-white dark:border-neutral-700 dark:bg-neutral-900">
                <div class="p-4">
                    <div class="flex items-center justify-between mb-4">
                        <flux:heading size="sm">{{ __('Components') }}</flux:heading>
                        <button @click="showComponentLibrary = false" class="text-neutral-400 hover:text-neutral-600 dark:hover:text-neutral-300">
                            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                            </svg>
                        </button>
                    </div>
                    
                    <div class="space-y-4">
                        <!-- Layout Components -->
                        <div>
                            <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('Layout') }}</flux:text>
                            <div class="grid grid-cols-2 gap-2">
                                <div draggable="true" 
                                     @dragstart="dragStart($event, 'header')"
                                     class="flex flex-col items-center p-3 border border-neutral-200 rounded-lg hover:bg-neutral-50 cursor-move dark:border-neutral-700 dark:hover:bg-neutral-800">
                                    <svg class="h-8 w-8 text-neutral-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5z"/>
                                    </svg>
                                    <flux:text class="text-xs">{{ __('Header') }}</flux:text>
                                </div>
                                <div draggable="true" 
                                     @dragstart="dragStart($event, 'text-block')"
                                     class="flex flex-col items-center p-3 border border-neutral-200 rounded-lg hover:bg-neutral-50 cursor-move dark:border-neutral-700 dark:hover:bg-neutral-800">
                                    <svg class="h-8 w-8 text-neutral-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
                                    </svg>
                                    <flux:text class="text-xs">{{ __('Text Block') }}</flux:text>
                                </div>
                                <div draggable="true" 
                                     @dragstart="dragStart($event, 'columns')"
                                     class="flex flex-col items-center p-3 border border-neutral-200 rounded-lg hover:bg-neutral-50 cursor-move dark:border-neutral-700 dark:hover:bg-neutral-800">
                                    <svg class="h-8 w-8 text-neutral-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2h-2a2 2 0 00-2 2"/>
                                    </svg>
                                    <flux:text class="text-xs">{{ __('Columns') }}</flux:text>
                                </div>
                                <div draggable="true" 
                                     @dragstart="dragStart($event, 'image')"
                                     class="flex flex-col items-center p-3 border border-neutral-200 rounded-lg hover:bg-neutral-50 cursor-move dark:border-neutral-700 dark:hover:bg-neutral-800">
                                    <svg class="h-8 w-8 text-neutral-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 002 2v12a2 2 0 002 2z"/>
                                    </svg>
                                    <flux:text class="text-xs">{{ __('Image') }}</flux:text>
                                </div>
                            </div>
                        </div>

                        <!-- Shapes -->
                        <div>
                            <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('Shapes') }}</flux:text>
                            <div class="grid grid-cols-2 gap-2">
                                <div draggable="true" 
                                     @dragstart="dragStart($event, 'shape')"
                                     class="flex flex-col items-center p-3 border border-neutral-200 rounded-lg hover:bg-neutral-50 cursor-move dark:border-neutral-700 dark:hover:bg-neutral-800">
                                    <svg class="h-8 w-8 text-neutral-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"/>
                                    </svg>
                                    <flux:text class="text-xs">{{ __('Shape') }}</flux:text>
                                </div>


                            </div>
                        </div>

                        <!-- Content Components -->
                        <div>
                            <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('Content') }}</flux:text>
                            <div class="grid grid-cols-2 gap-2">
                                <div draggable="true" 
                                     @dragstart="dragStart($event, 'weather')"
                                     class="flex flex-col items-center p-3 border border-neutral-200 rounded-lg hover:bg-neutral-50 cursor-move dark:border-neutral-700 dark:hover:bg-neutral-800">
                                    <svg class="h-8 w-8 text-neutral-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"/>
                                    </svg>
                                    <flux:text class="text-xs">{{ __('Weather') }}</flux:text>
                                </div>
                                <div draggable="true" 
                                     @dragstart="dragStart($event, 'clock')"
                                     class="flex flex-col items-center p-3 border border-neutral-200 rounded-lg hover:bg-neutral-50 cursor-move dark:border-neutral-700 dark:hover:bg-neutral-800">
                                    <svg class="h-8 w-8 text-neutral-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                    </svg>
                                    <flux:text class="text-xs">{{ __('Clock') }}</flux:text>
                                </div>
                                <div draggable="true" 
                                     @dragstart="dragStart($event, 'events')"
                                     class="flex flex-col items-center p-3 border border-neutral-200 rounded-lg hover:bg-neutral-50 cursor-move dark:border-neutral-700 dark:hover:bg-neutral-800">
                                    <svg class="h-8 w-8 text-neutral-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                                    </svg>
                                    <flux:text class="text-xs">{{ __('Events') }}</flux:text>
                                </div>
                                <div draggable="true" 
                                     @dragstart="dragStart($event, 'menu')"
                                     class="flex flex-col items-center p-3 border border-neutral-200 rounded-lg hover:bg-neutral-50 cursor-move dark:border-neutral-700 dark:hover:bg-neutral-800">
                                    <svg class="h-8 w-8 text-neutral-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                                    </svg>
                                    <flux:text class="text-xs">{{ __('Menu') }}</flux:text>
                                </div>
                            </div>
                        </div>

                        <!-- Interactive Components -->
                        <div>
                            <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('Interactive') }}</flux:text>
                            <div class="grid grid-cols-2 gap-2">
                                <div draggable="true" 
                                     @dragstart="dragStart($event, 'button')"
                                     class="flex flex-col items-center p-3 border border-neutral-200 rounded-lg hover:bg-neutral-50 cursor-move dark:border-neutral-700 dark:hover:bg-neutral-800">
                                    <svg class="h-8 w-8 text-neutral-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 15l-2 5L9 9l11 4-5 2zm0 0l5 5M7.188 2.239l.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656l-2.122 2.122"/>
                                    </svg>
                                    <flux:text class="text-xs">{{ __('Button') }}</flux:text>
                                </div>
                                <div draggable="true" 
                                     @dragstart="dragStart($event, 'navigation')"
                                     class="flex flex-col items-center p-3 border border-neutral-200 rounded-lg hover:bg-neutral-50 cursor-move dark:border-neutral-700 dark:hover:bg-neutral-800">
                                    <svg class="h-8 w-8 text-neutral-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7l4-4m0 0l4 4m-4-4v18"/>
                                    </svg>
                                    <flux:text class="text-xs">{{ __('Navigation') }}</flux:text>
                                </div>
                                <div draggable="true" 
                                     @dragstart="dragStart($event, 'card')"
                                     class="flex flex-col items-center p-3 border border-neutral-200 rounded-lg hover:bg-neutral-50 cursor-move dark:border-neutral-700 dark:hover:bg-neutral-800">
                                    <svg class="h-8 w-8 text-neutral-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"/>
                                    </svg>
                                    <flux:text class="text-xs">{{ __('Card') }}</flux:text>
                                </div>
                                <div draggable="true" 
                                     @dragstart="dragStart($event, 'video-player')"
                                     class="flex flex-col items-center p-3 border border-neutral-200 rounded-lg hover:bg-neutral-50 cursor-move dark:border-neutral-700 dark:hover:bg-neutral-800">
                                    <svg class="h-8 w-8 text-neutral-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                                    </svg>
                                    <flux:text class="text-xs">{{ __('Video') }}</flux:text>
                                </div>
                                
                                <!-- TV Button Component -->
                                <div draggable="true" 
                                     @dragstart="dragStart($event, 'tv-button')"
                                     class="flex flex-col items-center p-3 border border-neutral-200 rounded-lg hover:bg-neutral-50 cursor-move dark:border-neutral-700 dark:hover:bg-neutral-800">
                                    <svg class="h-8 w-8 text-neutral-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9m0-9c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5z"/>
                                    </svg>
                                    <flux:text class="text-xs">{{ __('TV Button') }}</flux:text>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Main Canvas Area -->
            <div class="flex-1 flex flex-col">
                <!-- Canvas Toolbar -->
                <div x-show="!isPreviewMode" class="canvas-toolbar border-b border-neutral-200 p-4 dark:border-neutral-700">
                    <div class="flex items-center justify-between">
                        <div x-show="!isPreviewMode" class="flex items-center gap-4">
                            <flux:text class="text-sm font-medium" x-text="selectedPage ? selectedPage.name : 'No Page Selected'">Welcome Template</flux:text>
                            <div class="flex items-center gap-2 text-xs text-neutral-500 dark:text-neutral-400">
                                <span>{{ __('Page:') }}</span>
                                <span x-text="selectedPage ? selectedPage.type : ''"></span>
                            </div>
                            <div class="flex items-center gap-2 text-xs text-neutral-500 dark:text-neutral-400">
                                <span>{{ __('Components:') }}</span>
                                <span x-text="components.length"></span>
                            </div>
                            <div class="flex items-center gap-2 text-xs text-neutral-500 dark:text-neutral-400">
                                <span>{{ __('Canvas:') }}</span>
                                <span x-text="canvasWidth + ' × ' + canvasHeight"></span>
                            </div>
                        </div>
                        
                        <div x-show="!isPreviewMode" class="flex items-center gap-2">
                            <!-- Page Navigation -->
                            <div class="page-navigation flex items-center gap-1 rounded border border-neutral-200 dark:border-neutral-700">
                                <button @click="previousPage()" :disabled="!canGoToPreviousPage()" class="px-2 py-1 text-sm hover:bg-neutral-50 dark:hover:bg-neutral-800 disabled:opacity-50 disabled:cursor-not-allowed">
                                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                                    </svg>
                                </button>
                                <span class="px-2 py-1 text-sm border-x border-neutral-200 dark:border-neutral-700" x-text="getCurrentPageIndex() + ' / 5'">1 / 5</span>
                                <button @click="nextPage()" :disabled="!canGoToNextPage()" class="px-2 py-1 text-sm hover:bg-neutral-50 dark:hover:bg-neutral-800 disabled:opacity-50 disabled:cursor-not-allowed">
                                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                                    </svg>
                                </button>
                            </div>
                            
                            <!-- Canvas Resolution Selector -->
                            <div x-show="!isPreviewMode" class="flex items-center gap-2">
                                <div class="flex items-center gap-1">
                                    <flux:text class="text-xs text-neutral-600 dark:text-neutral-400">{{ __('Resolution:') }}</flux:text>
                                    <div class="relative group">
                                        <svg class="h-3 w-3 text-neutral-400 cursor-help" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                        </svg>
                                        <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-neutral-900 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-50">
                                            Set canvas resolution for hotel TV displays
                                        </div>
                                    </div>
                                </div>
                                <select @change="changeCanvasResolution(resolutionPresets.find(p => p.name === $event.target.value))" 
                                        x-model="canvasResolution"
                                        class="px-3 py-2 text-sm border border-amber-300/60 rounded-lg bg-white/80 dark:bg-neutral-700/80 dark:border-amber-600/60 dark:text-neutral-200 focus:ring-2 focus:ring-amber-500/50 focus:border-amber-500 transition-all duration-200 font-medium">
                                    <template x-for="preset in resolutionPresets" :key="preset.name">
                                        <option :value="preset.name" x-text="preset.name"></option>
                                    </template>
                                    <option value="Custom Resolution">Custom Resolution</option>
                                </select>
                                

                                
                                <!-- Custom Resolution Inputs -->
                                <div x-show="canvasResolution === 'Custom Resolution'" class="flex items-center gap-2">
                                    <input type="number" x-model="customWidth" placeholder="Width" 
                                           class="w-16 px-2 py-1 text-xs border border-amber-300/60 rounded-lg bg-white/80 dark:bg-neutral-700/80 dark:border-amber-600/60 dark:text-neutral-200 focus:ring-2 focus:ring-amber-500/50 focus:border-amber-500 transition-all duration-200">
                                    <span class="text-xs text-amber-600 dark:text-amber-400 font-medium">×</span>
                                    <input type="number" x-model="customHeight" placeholder="Height" 
                                           class="w-16 px-2 py-1 text-xs border border-amber-300/60 rounded-lg bg-white/80 dark:bg-neutral-700/80 dark:border-amber-600/60 dark:text-neutral-200 focus:ring-2 focus:ring-amber-500/50 focus:border-amber-500 transition-all duration-200">
                                    <button @click="setCustomResolution()" 
                                            class="px-2 py-1 text-xs bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white rounded-lg hover:scale-105 transition-all duration-200 shadow-md">
                                        Set
                                    </button>
                                </div>
                            </div>
                            
                            <!-- Grid Controls -->
                            <div x-show="!isPreviewMode" class="flex items-center gap-1 rounded-xl border border-green-200/60 dark:border-green-600/40 bg-gradient-to-r from-white/90 to-green-50/90 dark:from-neutral-800/90 dark:to-green-900/20 shadow-md overflow-hidden">
                                <button @click="toggleGrid()" 
                                        :class="showGrid ? 'bg-gradient-to-r from-green-500 to-emerald-600 text-white shadow-inner' : 'hover:bg-gradient-to-r hover:from-green-100 hover:to-emerald-100 dark:hover:from-green-800/30 dark:hover:to-emerald-800/30'"
                                        class="px-3 py-2 text-sm font-medium transition-all duration-200 hover:scale-105">
                                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"/>
                                    </svg>
                                </button>
                                <button @click="toggleSnapToGrid()" 
                                        :class="snapToGrid ? 'bg-gradient-to-r from-blue-500 to-indigo-600 text-white shadow-inner' : 'hover:bg-gradient-to-r hover:from-blue-100 hover:to-indigo-100 dark:hover:from-blue-800/30 dark:hover:to-indigo-800/30'"
                                        class="px-3 py-2 text-sm font-medium transition-all duration-200 hover:scale-105 border-l border-green-200/60 dark:border-green-600/40">
                                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                    </svg>
                                </button>
                                <select @change="changeGridSize($event.target.value)" 
                                        x-model="gridSize"
                                        class="px-3 py-2 text-sm border-l border-green-200/60 dark:border-green-600/40 bg-transparent hover:bg-gradient-to-r hover:from-teal-100 hover:to-cyan-100 dark:hover:from-teal-800/30 dark:hover:to-cyan-800/30 transition-all duration-200 hover:scale-105 font-medium text-green-700 dark:text-green-300">
                                    <option value="10">10px</option>
                                    <option value="20">20px</option>
                                    <option value="25">25px</option>
                                    <option value="50">50px</option>
                                    <option value="100">100px</option>
                                </select>
                            </div>
                            
                            <!-- Guide Controls -->
                            <div x-show="!isPreviewMode" class="flex items-center gap-1 rounded-xl border border-blue-200/60 dark:border-blue-600/40 bg-gradient-to-r from-white/90 to-blue-50/90 dark:from-neutral-800/90 dark:to-blue-900/20 shadow-md overflow-hidden">
                                <button @click="toggleGuides()" 
                                        :class="showGuides ? 'bg-gradient-to-r from-purple-500 to-indigo-600 text-white shadow-inner' : 'hover:bg-gradient-to-r hover:from-blue-100 hover:to-indigo-100 dark:hover:from-blue-800/30 dark:hover:to-indigo-800/30'"
                                        class="px-3 py-2 text-sm font-medium transition-all duration-200 hover:scale-105">
                                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"/>
                                    </svg>
                                </button>
                                <button @click="addHorizontalGuide(100)" 
                                        class="px-3 py-2 text-sm border-l border-blue-200/60 dark:border-blue-600/40 bg-transparent hover:bg-gradient-to-r hover:from-green-100 hover:to-emerald-100 dark:hover:from-green-800/30 dark:hover:to-emerald-800/30 transition-all duration-200 hover:scale-105 font-medium">
                                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
                                    </svg>
                                </button>
                                <button @click="addVerticalGuide(100)" 
                                        class="px-3 py-2 text-sm border-l border-blue-200/60 dark:border-blue-600/40 bg-transparent hover:bg-gradient-to-r hover:from-emerald-100 hover:to-teal-100 dark:hover:from-emerald-800/30 dark:hover:to-teal-800/30 transition-all duration-200 hover:scale-105 font-medium">
                                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                                    </svg>
                                </button>
                                <button @click="showGuideInfo()" 
                                        class="px-3 py-2 text-sm border-l border-blue-200/60 dark:border-blue-600/40 bg-transparent hover:bg-gradient-to-r hover:from-purple-100 hover:to-violet-100 dark:hover:from-purple-800/30 dark:hover:to-violet-800/30 transition-all duration-200 hover:scale-105 font-medium">
                                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                    </svg>
                                </button>
                            </div>
                            
                            <!-- Zoom Controls -->
                            <div x-show="!isPreviewMode" class="flex items-center gap-1 rounded-xl border border-indigo-200/60 dark:border-indigo-600/40 bg-gradient-to-r from-white/90 to-indigo-50/90 dark:from-neutral-800/90 dark:to-indigo-900/20 shadow-md overflow-hidden">
                                <button @click="zoomOut()" class="px-3 py-2 text-sm hover:bg-gradient-to-r hover:from-red-100 hover:to-pink-100 dark:hover:from-red-800/30 dark:hover:to-pink-800/30 transition-all duration-200 hover:scale-105 font-bold text-lg">−</button>
                                <span class="px-3 py-2 text-sm border-x border-indigo-200/60 dark:border-indigo-600/40 font-medium text-indigo-700 dark:text-indigo-300" x-text="Math.round(canvasZoom * 100) + '%'">100%</span>
                                <button @click="zoomIn()" class="px-3 py-2 text-sm hover:bg-gradient-to-r hover:from-green-100 hover:to-emerald-100 dark:hover:from-green-800/30 dark:hover:to-emerald-800/30 transition-all duration-200 hover:scale-105 font-bold text-lg">+</button>
                                <button @click="fitToPage()" class="px-3 py-2 text-sm hover:bg-gradient-to-r hover:from-blue-100 hover:to-indigo-100 dark:hover:from-blue-800/30 dark:hover:to-indigo-800/30 transition-all duration-200 hover:scale-105 font-medium border-l border-indigo-200/60 dark:border-indigo-600/40">Fit</button>
                                <button @click="fitToScreen()" class="px-3 py-2 text-sm hover:bg-gradient-to-r hover:from-purple-100 hover:to-violet-100 dark:hover:from-purple-800/30 dark:hover:to-violet-800/30 transition-all duration-200 hover:scale-105 font-medium border-l border-indigo-200/60 dark:border-indigo-600/40">Fill</button>
                                <button @click="resetCanvas()" class="px-3 py-2 text-sm hover:bg-gradient-to-r hover:from-orange-100 hover:to-amber-100 dark:hover:from-orange-800/30 dark:hover:to-amber-800/30 transition-all duration-200 hover:scale-105 font-medium border-l border-indigo-200/60 dark:border-indigo-600/40">Reset</button>
                            </div>
                            
                            <!-- Canvas Actions -->
                            <flux:button x-show="!isPreviewMode" variant="subtle" size="sm" icon="arrow-uturn-left">
                                {{ __('Undo') }}
                            </flux:button>
                            <flux:button x-show="!isPreviewMode" variant="subtle" size="sm" icon="arrow-uturn-right">
                                {{ __('Redo') }}
                            </flux:button>
                            <flux:button x-show="!isPreviewMode" @click="showScalingInfo()" variant="subtle" size="sm">
                                {{ __('Scale Info') }}
                            </flux:button>
                            <flux:button x-show="!isPreviewMode" @click="showKeyboardShortcuts()" variant="subtle" size="sm">
                                {{ __('Help') }}
                            </flux:button>
                        </div>
                    </div>
                </div>

                <!-- Canvas -->
                <div class="flex-1 bg-neutral-100 dark:bg-neutral-800 overflow-auto relative canvas-container"
                     x-ref="canvasContainer"
                     @wheel="handleCanvasZoom($event)"
                     @mousedown="startCanvasDrag($event)"
                     @mousemove="handleCanvasDrag($event)"
                     @mouseup="stopCanvasDrag()"
                     @mouseleave="stopCanvasDrag()"
                     @mousemove="trackMouse($event)"
                     :style="`padding: ${showGuides ? 24 : 0}px;`">
                    <div class="canvas-zoom"
                         x-ref="canvas"
                         :style="`transform: translate(${canvasOffset.x}px, ${canvasOffset.y}px) scale(${canvasZoom}); transform-origin: 0 0;`">
                        
                        <!-- Scena-style Ruler System with Adaptive Spacing -->
                        <div x-show="showGuides" class="absolute pointer-events-none inset-0 z-10">
                            
                            <!-- Top Ruler (Horizontal) -->
                            <div class="absolute top-0 left-0 w-full h-6 bg-gradient-to-b from-neutral-100 to-neutral-200 dark:from-neutral-800 dark:to-neutral-700 border-b border-neutral-300 dark:border-neutral-600 shadow-sm">
                                <!-- Ruler marks and numbers with adaptive spacing based on canvas resolution -->
                                <template x-for="i in Math.ceil(canvasWidth / getRulerSpacing())" :key="'h-ruler-' + i">
                                    <div class="absolute top-0 left-0 h-full">
                                        <!-- Major marks every major interval -->
                                        <template x-if="i % 2 === 0">
                                            <div class="absolute w-px bg-neutral-600 dark:bg-neutral-400"
                                                 :style="`left: ${(i * getRulerSpacing() * getScaleFactor())}px; top: 0; height: ${getRulerMarkHeights().major}px;`"></div>
                                        </template>
                                        
                                        <!-- Minor marks every minor interval -->
                                        <template x-if="i % 2 === 1">
                                            <div class="absolute w-px bg-neutral-400 dark:bg-neutral-500"
                                                 :style="`left: ${(i * getRulerSpacing() * getScaleFactor())}px; top: 0; height: ${getRulerMarkHeights().minor}px;`"></div>
                                        </template>
                                        
                                        <!-- Numbers every major interval -->
                                        <template x-if="i % 2 === 0">
                                            <div class="absolute font-medium text-neutral-700 dark:text-neutral-300"
                                                 :class="getRulerTextSize()"
                                                 :style="`left: ${(i * getRulerSpacing() * getScaleFactor()) - (getRulerNumberWidth() / 2)}px; top: 16px; width: ${getRulerNumberWidth()}px; text-align: center;`"
                                                 x-text="i * getRulerSpacing()"></div>
                                        </template>
                                    </div>
                                </template>
                            </div>
                            
                            <!-- Left Ruler (Vertical) -->
                            <div class="absolute top-0 left-0 w-6 h-full bg-gradient-to-r from-neutral-100 to-neutral-200 dark:from-neutral-800 dark:to-neutral-700 border-r border-neutral-300 dark:border-neutral-600 shadow-sm">
                                <!-- Ruler marks and numbers with adaptive spacing based on canvas resolution -->
                                <template x-for="i in Math.ceil(canvasHeight / getRulerSpacing())" :key="'v-ruler-' + i">
                                    <div class="absolute top-0 left-0 w-full">
                                        <!-- Major marks every major interval -->
                                        <template x-if="i % 2 === 0">
                                            <div class="absolute h-px bg-neutral-600 dark:bg-neutral-400"
                                                 :style="`top: ${(i * getRulerSpacing() * getScaleFactor())}px; left: 0; width: ${getRulerMarkHeights().major}px;`"></div>
                                        </template>
                                        
                                        <!-- Minor marks every minor interval -->
                                        <template x-if="i % 2 === 1">
                                            <div class="absolute h-px bg-neutral-400 dark:bg-neutral-500"
                                                 :style="`top: ${(i * getRulerSpacing() * getScaleFactor())}px; left: 0; width: ${getRulerMarkHeights().minor}px;`"></div>
                                        </template>
                                        
                                        <!-- Numbers every major interval -->
                                        <template x-if="i % 2 === 0">
                                            <div class="absolute font-medium text-neutral-700 dark:text-neutral-300 transform -rotate-90 origin-center"
                                                 :class="getRulerTextSize()"
                                                 :style="`top: ${(i * getRulerSpacing() * getScaleFactor()) + 15}px; left: 18px; width: ${getRulerNumberWidth()}px; text-align: center;`"
                                                 x-text="i * getRulerSpacing()"></div>
                                        </template>
                                    </div>
                                </template>
                            </div>
                            
                            <!-- Corner square -->
                            <div class="absolute top-0 left-0 w-6 h-6 bg-gradient-to-br from-neutral-200 to-neutral-300 dark:from-neutral-700 dark:to-neutral-600 border-r border-b border-neutral-300 dark:border-neutral-600 shadow-sm"></div>
                            
                            <!-- Horizontal Guides -->
                            <template x-for="guide in guides.horizontal" :key="guide.id">
                                <div class="absolute w-full h-0.5 bg-blue-500 opacity-80 cursor-ns-resize"
                                     :style="`top: ${guide.position * getScaleFactor()}px;`"
                                     @mousedown="startDragGuide(guide, $event)"
                                     @dblclick="removeGuide(guide.id)">
                                    <div class="absolute -top-1 -left-1 w-2 h-2 bg-blue-500 rounded-full"></div>
                                    <div class="absolute -top-1 -right-1 w-2 h-2 bg-blue-500 rounded-full"></div>
                                </div>
                            </template>
                            
                            <!-- Vertical Guides -->
                            <template x-for="guide in guides.vertical" :key="guide.id">
                                <div class="absolute h-full w-0.5 bg-blue-500 opacity-80 cursor-ew-resize"
                                     :style="`left: ${guide.position * getScaleFactor()}px;`"
                                     @mousedown="startDragGuide(guide, $event)"
                                     @dblclick="removeGuide(guide.id)">
                                    <div class="absolute -left-1 -top-1 w-2 h-2 bg-blue-500 rounded-full"></div>
                                    <div class="absolute -left-1 -bottom-1 w-2 h-2 bg-blue-500 rounded-full"></div>
                                </div>
                            </template>
                            
                            <!-- Mouse Position Display -->
                            <div x-show="!isPreviewMode" 
                                 class="fixed bg-black/80 text-white text-xs px-2 py-1 rounded pointer-events-none z-50 font-mono"
                                 :style="`left: ${mouseX + 10}px; top: ${mouseY + 10}px;`"
                                 x-text="'X: ' + Math.round(mouseCanvasX) + 'px, Y: ' + Math.round(mouseCanvasY) + 'px'"></div>
                        </div>
                        
                        <!-- Device Frame -->
                        <div :style="`width: ${getDeviceFrameDimensions().width}px; height: ${getDeviceFrameDimensions().height}px; position: absolute; left: ${showGuides ? 24 : 0}px; top: ${showGuides ? 24 : 0}px; z-index: 5;`" 
                             class="bg-white rounded-lg shadow-xl dark:bg-neutral-900 relative overflow-hidden transition-all duration-300">
                            
                            <!-- Grid Overlay -->
                            <div x-show="showGrid" class="absolute inset-0 pointer-events-none z-1">
                                <svg class="w-full h-full" xmlns="http://www.w3.org/2000/svg">
                                    <defs>
                                        <pattern id="grid" :width="gridSize * getScaleFactor()" :height="gridSize * getScaleFactor()" patternUnits="userSpaceOnUse">
                                            <path :d="`M ${gridSize * getScaleFactor()} 0 L 0 0 0 ${gridSize * getScaleFactor()}`" 
                                                  fill="none" 
                                                  stroke="rgba(0, 0, 0, 0.1)" 
                                                  stroke-width="1"
                                                  class="dark:stroke-white/10"/>
                                        </pattern>
                                    </defs>
                                    <rect width="100%" height="100%" fill="url(#grid)" />
                                </svg>
                            </div>
                            

                            
                            <!-- Canvas Content -->
                            <div class="absolute inset-0 p-4">
                                <!-- Drop Zone -->
                                <div class="h-full w-full min-h-[400px] border-2 border-dashed border-neutral-300 dark:border-neutral-600 rounded-lg"
                                     :class="dragOver && !isPreviewMode ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20' : ''"
                                     @dragover.prevent="!isPreviewMode && (dragOver = true)"
                                     @dragleave="!isPreviewMode && (dragOver = false)"
                                     @drop="!isPreviewMode && dropComponent($event)"
                                     :style="getPageBackgroundStyle()">
                                    
                                    <!-- Drop Zone Text -->
                                    <div x-show="components.length === 0 && !isPreviewMode" class="h-full flex items-center justify-center">
                                        <div class="text-center">
                                            <svg class="mx-auto h-24 w-24 text-neutral-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 002 2v12a2 2 0 002 2z"/>
                                            </svg>
                                            <flux:text class="text-lg font-medium text-neutral-600 dark:text-neutral-400">Drag components here</flux:text>
                                            <flux:text class="text-sm text-neutral-500 dark:text-neutral-500">Start building your template</flux:text>
                                        </div>
                                    </div>

                                    <!-- Background Overlay -->
                                    <div x-show="selectedPage && selectedPage.background.overlayOpacity > 0" 
                                         class="absolute inset-0 rounded-lg"
                                         :style="'background-color: ' + (selectedPage?.background.overlayColor || '#000000') + '; opacity: ' + ((selectedPage?.background.overlayOpacity || 0) / 100) + ';'">
                                    </div>

                                    <!-- Rendered Components -->
                                    <template x-for="(component, index) in components" :key="component.id">
                                        <div :id="'component-' + component.id"
                                             :style="'position: absolute; left: ' + scaleComponentToFrame(component).x + 'px; top: ' + scaleComponentToFrame(component).y + 'px; width: ' + scaleComponentToFrame(component).width + 'px; height: ' + scaleComponentToFrame(component).height + 'px;'"
                                             :class="`
                                                border rounded-lg relative z-10 bg-transparent component-container
                                                ${resizing && selectedComponent?.id === component.id ? 'ring-2 ring-orange-500 ring-offset-2' : ''}
                                                ${selectedComponent?.id === component.id ? 'ring-2 ring-blue-500' : ''}
                                                ${isPreviewMode ? 'cursor-default border-transparent shadow-none' : 'cursor-move border-neutral-200 shadow-sm'}
                                             `"
                                             @mousedown="!isPreviewMode && startDrag($event, component)"
                                             @click="!isPreviewMode && selectComponent(component)">
                                            
                                            <!-- Component Content -->
                                            <div class="p-3 h-full">
                                                <template x-if="component.type === 'header'">
                                                    <div class="text-center"
                                                         :style="`transform: rotate(${component.data.rotation || 0}deg);`">
                                                        <h1 :class="`font-bold text-gray-800 dark:text-gray-200 ${component.data.fontFamily || 'font-sans'}`" :style="`font-size: ${component.data.fontSize || 32}px;`" x-text="component.data.title || 'Welcome'">Welcome</h1>
                                                        <p :class="`text-gray-600 dark:text-gray-400 ${component.data.fontFamily || 'font-sans'}`" :style="`font-size: ${component.data.fontSize || 16}px;`" x-text="component.data.subtitle || 'Subtitle'">Subtitle</p>
                                                    </div>
                                                </template>
                                                
                                                <template x-if="component.type === 'text-block'">
                                                    <div :style="`transform: rotate(${component.data.rotation || 0}deg);`">
                                                        <p :class="`text-gray-700 dark:text-gray-300 ${component.data.fontFamily || 'font-sans'}`" :style="`font-size: ${component.data.fontSize || 16}px;`" x-text="component.data.text || 'Text content'">Text content</p>
                                                    </div>
                                                </template>
                                                
                                                <template x-if="component.type === 'weather'">
                                                    <div class="text-center"
                                                         :style="`transform: rotate(${component.data.rotation || 0}deg);`">
                                                        <div :class="`font-bold text-blue-600 dark:text-blue-400 ${component.data.fontFamily || 'font-sans'}`" :style="`font-size: ${component.data.fontSize || 48}px;`" x-text="component.data.temperature || '72°F'">72°F</div>
                                                        <p :class="`text-gray-600 dark:text-gray-400 ${component.data.fontFamily || 'font-sans'}`" :style="`font-size: ${component.data.fontSize || 14}px;`" x-text="component.data.condition || 'Sunny'">Sunny</p>
                                                    </div>
                                                </template>
                                                
                                                <template x-if="component.type === 'clock'">
                                                    <div class="h-full flex items-center justify-center"
                                                         :style="`transform: rotate(${component.data.rotation || 0}deg);`">
                                                        
                                                        <!-- Digital Clock Styles -->
                                                        <template x-if="component.data.style.startsWith('digital')">
                                                            <div class="text-center"
                                                                 :style="`
                                                                     background-color: ${component.data.backgroundColor || 'transparent'};
                                                                     color: ${component.data.textColor || '#1f2937'};
                                                                     border: ${component.data.borderWidth || 0}px solid ${component.data.borderColor || '#d1d5db'};
                                                                     border-radius: ${component.data.borderRadius || '0px'};
                                                                     padding: ${component.data.padding || 16}px;
                                                                     box-shadow: ${component.data.shadow ? '0 4px 6px -1px rgba(0, 0, 0, 0.1)' : 'none'};
                                                                 `">
                                                                
                                                                <!-- Modern Digital -->
                                                                <template x-if="component.data.style === 'digital-modern'">
                                                                    <div class="space-y-2">
                                                                        <div :class="`font-bold ${component.data.fontFamily || 'font-sans'}`" 
                                                                             :style="`font-size: ${component.data.fontSize || 48}px; color: ${component.data.textColor || '#1f2937'};`"
                                                                             x-text="component.data.time || '12:00'">12:00</div>
                                                                        <div x-show="component.data.showDate" 
                                                                             :class="`text-sm ${component.data.fontFamily || 'font-sans'}`"
                                                                             :style="`font-size: ${(component.data.fontSize || 48) * 0.3}px; color: ${component.data.textColor || '#1f2937'}; opacity: 0.8;`"
                                                                             x-text="component.data.date || 'Today'">Today</div>
                                                                    </div>
                                                                </template>
                                                                
                                                                <!-- Minimal Digital -->
                                                                <template x-if="component.data.style === 'digital-minimal'">
                                                                    <div class="space-y-1">
                                                                        <div :class="`font-light ${component.data.fontFamily || 'font-sans'}`" 
                                                                             :style="`font-size: ${component.data.fontSize || 48}px; color: ${component.data.textColor || '#1f2937'};`"
                                                                             x-text="component.data.time || '12:00'">12:00</div>
                                                                        <div x-show="component.data.showDate" 
                                                                             :class="`font-extralight ${component.data.fontFamily || 'font-sans'}`"
                                                                             :style="`font-size: ${(component.data.fontSize || 48) * 0.25}px; color: ${component.data.textColor || '#1f2937'}; opacity: 0.6;`"
                                                                             x-text="component.data.date || 'Today'">Today</div>
                                                                    </div>
                                                                </template>
                                                                
                                                                <!-- Bold Digital -->
                                                                <template x-if="component.data.style === 'digital-bold'">
                                                                    <div class="space-y-3">
                                                                        <div :class="`font-black ${component.data.fontFamily || 'font-sans'}`" 
                                                                             :style="`font-size: ${component.data.fontSize || 48}px; color: ${component.data.textColor || '#1f2937'};`"
                                                                             x-text="component.data.time || '12:00'">12:00</div>
                                                                        <div x-show="component.data.showDate" 
                                                                             :class="`font-bold ${component.data.fontFamily || 'font-sans'}`"
                                                                             :style="`font-size: ${(component.data.fontSize || 48) * 0.35}px; color: ${component.data.textColor || '#1f2937'};`"
                                                                             x-text="component.data.date || 'Today'">Today</div>
                                                                    </div>
                                                                </template>
                                                                
                                                                <!-- Elegant Digital -->
                                                                <template x-if="component.data.style === 'digital-elegant'">
                                                                    <div class="space-y-2">
                                                                        <div :class="`font-serif font-medium ${component.data.fontFamily || 'font-sans'}`" 
                                                                             :style="`font-size: ${component.data.fontSize || 48}px; color: ${component.data.textColor || '#1f2937'};`"
                                                                             x-text="component.data.time || '12:00'">12:00</div>
                                                                        <div x-show="component.data.showDate" 
                                                                             :class="`font-serif ${component.data.fontFamily || 'font-sans'}`"
                                                                             :style="`font-size: ${(component.data.fontSize || 48) * 0.3}px; color: ${component.data.textColor || '#1f2937'}; opacity: 0.7;`"
                                                                             x-text="component.data.date || 'Today'">Today</div>
                                                                    </div>
                                                                </template>
                                                            </div>
                                                        </template>
                                                        
                                                        <!-- Analogue Clock Styles -->
                                                        <template x-if="component.data.style.startsWith('analogue')">
                                                            <div class="text-center"
                                                                 :style="`
                                                                     background-color: ${component.data.backgroundColor || 'transparent'};
                                                                     color: ${component.data.textColor || '#1f2937'};
                                                                     border: ${component.data.borderWidth || 0}px solid ${component.data.borderColor || '#d1d5db'};
                                                                     border-radius: ${component.data.borderRadius || '0px'};
                                                                     padding: ${component.data.padding || 16}px;
                                                                     box-shadow: ${component.data.shadow ? '0 4px 6px -1px rgba(0, 0, 0, 0.1)' : 'none'};
                                                                 `">
                                                                
                                                                <!-- Classic Analogue -->
                                                                <template x-if="component.data.style === 'analogue-classic'">
                                                                    <div class="relative">
                                                                        <svg :width="component.data.fontSize * 1.5" :height="component.data.fontSize * 1.5" class="mx-auto">
                                                                            <!-- Clock face -->
                                                                            <circle cx="50%" cy="50%" r="45%" fill="transparent" stroke="currentColor" stroke-width="2"/>
                                                                            <!-- Hour markers -->
                                                                            <template x-for="i in 12" :key="i">
                                                                                <line :x1="50 + 40 * Math.cos((i * 30 - 90) * Math.PI / 180)" 
                                                                                      :y1="50 + 40 * Math.sin((i * 30 - 90) * Math.PI / 180)"
                                                                                      :x2="50 + 35 * Math.cos((i * 30 - 90) * Math.PI / 180)"
                                                                                      :y2="50 + 35 * Math.sin((i * 30 - 90) * Math.PI / 180)"
                                                                                      stroke="currentColor" stroke-width="2"/>
                                                                            </template>
                                                                            <!-- Clock hands -->
                                                                            <line x1="50" y1="50" x2="50" y2="25" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
                                                                            <line x1="50" y1="50" x2="65" y2="50" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                                                                            <line x1="50" y1="50" x2="50" y2="15" stroke="currentColor" stroke-width="1" stroke-linecap="round"/>
                                                                        </svg>
                                                                        <div x-show="component.data.showDate" 
                                                                             :class="`mt-2 text-sm ${component.data.fontFamily || 'font-sans'}`"
                                                                             :style="`font-size: ${(component.data.fontSize || 48) * 0.25}px; color: ${component.data.textColor || '#1f2937'};`"
                                                                             x-text="component.data.date || 'Today'">Today</div>
                                                                    </div>
                                                                </template>
                                                                
                                                                <!-- Minimal Analogue -->
                                                                <template x-if="component.data.style === 'analogue-minimal'">
                                                                    <div class="relative">
                                                                        <svg :width="component.data.fontSize * 1.2" :height="component.data.fontSize * 1.2" class="mx-auto">
                                                                            <!-- Clock face -->
                                                                            <circle cx="50%" cy="50%" r="45%" fill="transparent" stroke="currentColor" stroke-width="1" opacity="0.3"/>
                                                                            <!-- Clock hands -->
                                                                            <line x1="50" y1="50" x2="50" y2="30" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                                                                            <line x1="50" y1="50" x2="60" y2="50" stroke="currentColor" stroke-width="1" stroke-linecap="round"/>
                                                                        </svg>
                                                                        <div x-show="component.data.showDate" 
                                                                             :class="`mt-2 text-xs ${component.data.fontFamily || 'font-sans'}`"
                                                                             :style="`font-size: ${(component.data.fontSize || 48) * 0.2}px; color: ${component.data.textColor || '#1f2937'}; opacity: 0.6;`"
                                                                             x-text="component.data.date || 'Today'">Today</div>
                                                                    </div>
                                                                </template>
                                                                
                                                                <!-- Elegant Analogue -->
                                                                <template x-if="component.data.style === 'analogue-elegant'">
                                                                    <div class="relative">
                                                                        <svg :width="component.data.fontSize * 1.8" :height="component.data.fontSize * 1.8" class="mx-auto">
                                                                            <!-- Clock face -->
                                                                            <circle cx="50%" cy="50%" r="45%" fill="transparent" stroke="currentColor" stroke-width="1.5" opacity="0.4"/>
                                                                            <!-- Hour markers -->
                                                                            <template x-for="i in 12" :key="i">
                                                                                <line :x1="50 + 40 * Math.cos((i * 30 - 90) * Math.PI / 180)" 
                                                                                      :y1="50 + 40 * Math.sin((i * 30 - 90) * Math.PI / 180)"
                                                                                      :x2="50 + 32 * Math.cos((i * 30 - 90) * Math.PI / 180)"
                                                                                      :y2="50 + 32 * Math.sin((i * 30 - 90) * Math.PI / 180)"
                                                                                      stroke="currentColor" stroke-width="1" opacity="0.6"/>
                                                                            </template>
                                                                            <!-- Clock hands -->
                                                                            <line x1="50" y1="50" x2="50" y2="20" stroke="currentColor" stroke-width="4" stroke-linecap="round"/>
                                                                            <line x1="50" y1="50" x2="70" y2="50" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                                                                            <line x1="50" y1="50" x2="50" y2="10" stroke="currentColor" stroke-width="1" stroke-linecap="round"/>
                                                                        </svg>
                                                                        <div x-show="component.data.showDate" 
                                                                             :class="`mt-3 text-sm ${component.data.fontFamily || 'font-sans'}`"
                                                                             :style="`font-size: ${(component.data.fontSize || 48) * 0.3}px; color: ${component.data.textColor || '#1f2937'};`"
                                                                             x-text="component.data.date || 'Today'">Today</div>
                                                                    </div>
                                                                </template>
                                                            </div>
                                                        </template>
                                                    </div>
                                                </template>
                                                
                                                <template x-if="component.type === 'events'">
                                                    <div :style="`transform: rotate(${component.data.rotation || 0}deg);`">
                                                        <h3 :class="`font-semibold text-gray-800 dark:text-gray-200 mb-2 ${component.data.fontFamily || 'font-sans'}`" :style="`font-size: ${component.data.fontSize || 16}px;`" x-text="component.data.title || 'Events'">Events</h3>
                                                        <ul :class="`text-gray-600 dark:text-gray-400 ${component.data.fontFamily || 'font-sans'}`" :style="`font-size: ${component.data.fontSize || 14}px;`">
                                                            <li x-text="component.data.event1 || 'Event 1'">Event 1</li>
                                                            <li x-text="component.data.event2 || 'Event 2'">Event 2</li>
                                                        </ul>
                                                    </div>
                                                </template>
                                                
                                                <template x-if="component.type === 'menu'">
                                                    <div :style="`transform: rotate(${component.data.rotation || 0}deg);`">
                                                        <h3 :class="`font-semibold text-gray-800 dark:text-gray-200 mb-2 ${component.data.fontFamily || 'font-sans'}`" :style="`font-size: ${component.data.fontSize || 16}px;`" x-text="component.data.title || 'Menu'">Menu</h3>
                                                        <ul :class="`text-gray-600 dark:text-gray-400 ${component.data.fontFamily || 'font-sans'}`" :style="`font-size: ${component.data.fontSize || 14}px;`">
                                                            <li x-text="component.data.item1 || 'Item 1'">Item 1</li>
                                                            <li x-text="component.data.item2 || 'Item 2'">Item 2</li>
                                                        </ul>
                                                    </div>
                                                </template>

                                                <template x-if="component.type === 'button'">
                                                    <div class="h-full flex items-center justify-center"
                                                         :style="`transform: rotate(${component.data.rotation || 0}deg);`">
                                                        <button :style="`
                                                            background-color: ${component.data.backgroundColor || '#3b82f6'};
                                                            color: ${component.data.textColor || '#ffffff'};
                                                            border: ${component.data.borderWidth || 0}px ${component.data.borderStyle || 'none'} ${component.data.borderColor || '#000000'};
                                                            padding: ${component.data.paddingY || 3}px ${component.data.paddingX || 6}px;
                                                        `"
                                                                :class="`
                                                                    ${component.data.fontSize || 'text-base'} 
                                                                    ${component.data.fontWeight || 'font-medium'} 
                                                                    ${component.data.fontFamily || 'font-sans'}
                                                                    ${component.data.borderRadius || 'rounded-lg'}
                                                                    transition-all duration-200
                                                                    flex items-center gap-2
                                                                `"
                                                                @click="navigateToPage(component.data.targetPage)"
                                                                @mouseenter="component.data.hoverEffect && (component.data._hoverActive = true)"
                                                                @mouseleave="component.data.hoverEffect && (component.data._hoverActive = false)"
                                                                :style="component.data.hoverEffect && component.data._hoverActive ? `
                                                                    background-color: ${component.data.hoverBackgroundColor || '#2563eb'};
                                                                    color: ${component.data.hoverTextColor || '#ffffff'};
                                                                ` : ''">
                                                            
                                                            <!-- Icon (Left) -->
                                                            <span x-show="component.data.icon !== 'none' && component.data.iconPosition === 'left'" 
                                                                  x-html="getIconHtml(component)"
                                                                  :class="component.data.iconSize || 'text-base'"
                                                                  :style="'color: ' + (component.data.iconColor || component.data.textColor || '#ffffff') + ';'">
                                                            </span>
                                                            
                                                            <!-- Button Text -->
                                                            <span x-text="component.data.text || 'Button'"></span>
                                                            
                                                            <!-- Icon (Right) -->
                                                            <span x-show="component.data.icon !== 'none' && component.data.iconPosition === 'right'" 
                                                                  x-html="getIconHtml(component)"
                                                                  :class="component.data.iconSize || 'text-base'"
                                                                  :style="'color: ' + (component.data.iconColor || component.data.textColor || '#ffffff') + ';'">
                                                            </span>
                                                        </button>
                                                    </div>
                                                </template>

                                                <template x-if="component.type === 'navigation'">
                                                    <div class="h-full flex flex-col items-center justify-center gap-2"
                                                         :style="`transform: rotate(${component.data.rotation || 0}deg);`">
                                                        <div class="text-center">
                                                            <h3 :class="`font-semibold text-gray-800 dark:text-gray-200 mb-2 ${component.data.fontFamily || 'font-sans'}`" :style="`font-size: ${component.data.fontSize || 16}px;`" x-text="component.data.title || 'Navigation'">Navigation</h3>
                                                            <div class="grid grid-cols-2 gap-2">
                                                                <button :class="`px-3 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition-colors ${component.data.fontFamily || 'font-sans'}`"
                                                                        :style="`font-size: ${component.data.fontSize || 14}px;`"
                                                                        x-text="component.data.button1Text || 'Back'"
                                                                        @click="navigateToPage(component.data.button1Page)">
                                                                    Back
                                                                </button>
                                                                <button :class="`px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors ${component.data.fontFamily || 'font-sans'}`"
                                                                        :style="`font-size: ${component.data.fontSize || 14}px;`"
                                                                        x-text="component.data.button2Text || 'Next'"
                                                                        @click="navigateToPage(component.data.button2Page)">
                                                                    Next
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </template>

                                                <template x-if="component.type === 'card'">
                                                    <div class="h-full p-3"
                                                         :style="`transform: rotate(${component.data.rotation || 0}deg);`">
                                                        <div class="bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-lg p-4 h-full">
                                                            <h3 :class="`font-semibold text-gray-800 dark:text-gray-200 mb-2 ${component.data.fontFamily || 'font-sans'}`" :style="`font-size: ${component.data.fontSize || 16}px;`" x-text="component.data.title || 'Card Title'">Card Title</h3>
                                                            <p :class="`text-gray-600 dark:text-gray-400 ${component.data.fontFamily || 'font-sans'}`" :style="`font-size: ${component.data.fontSize || 14}px;`" x-text="component.data.content || 'Card content goes here'">Card content goes here</p>
                                                            <button :class="`mt-3 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors ${component.data.fontFamily || 'font-sans'}`"
                                                                    :style="`font-size: ${component.data.fontSize || 14}px;`"
                                                                    x-text="component.data.buttonText || 'Learn More'"
                                                                    @click="navigateToPage(component.data.targetPage)">
                                                                Learn More
                                                            </button>
                                                        </div>
                                                    </div>
                                                </template>

                                                <template x-if="component.type === 'video-player'">
                                                    <div class="h-full flex flex-col items-center justify-center"
                                                         :style="`transform: rotate(${component.data.rotation || 0}deg);`">
                                                        <div class="w-16 h-16 bg-transparent border-2 border-gray-300 rounded-lg flex items-center justify-center mb-2">
                                                            <svg class="h-8 w-8 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                                            </svg>
                                                        </div>
                                                        <h3 :class="`font-semibold text-gray-800 dark:text-gray-200 text-center ${component.data.fontFamily || 'font-sans'}`" :style="`font-size: ${component.data.fontSize || 14}px;`" x-text="component.data.title || 'Video Player'">Video Player</h3>
                                                        <p :class="`text-gray-600 dark:text-gray-400 text-center ${component.data.fontFamily || 'font-sans'}`" :style="`font-size: ${component.data.fontSize || 12}px;`" x-text="component.data.description || 'Click to play video'">Click to play video</p>
                                                    </div>
                                                </template>
                                                
                                                <template x-if="component.type === 'tv-button'">
                                                    <div class="h-full flex flex-col items-center justify-center"
                                                         :style="`transform: rotate(${component.data.rotation || 0}deg);`">
                                                        <button @click="navigateToTVPage()" 
                                                                :class="{
                                                                    'bg-blue-600 hover:bg-blue-700': component.data.style === 'primary',
                                                                    'bg-gray-600 hover:bg-gray-700': component.data.style === 'secondary',
                                                                    'bg-green-600 hover:bg-green-700': component.data.style === 'success',
                                                                    'bg-yellow-600 hover:bg-yellow-700': component.data.style === 'warning',
                                                                    'bg-red-600 hover:bg-red-700': component.data.style === 'danger'
                                                                }"
                                                                class="w-16 h-16 rounded-lg flex items-center justify-center mb-2 transition-colors">
                                                            <svg class="h-8 w-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9m0-9c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5z"/>
                                                            </svg>
                                                        </button>
                                                        <h3 :class="`font-semibold text-gray-800 dark:text-gray-200 text-center ${component.data.fontFamily || 'font-sans'}`" :style="`font-size: ${component.data.fontSize || 14}px;`" x-text="component.data.text || 'Watch TV'">Watch TV</h3>
                                                        <p :class="`text-gray-600 dark:text-gray-400 text-center ${component.data.fontFamily || 'font-sans'}`" :style="`font-size: ${component.data.fontSize || 12}px;`">IPTV Channels</p>
                                                    </div>
                                                </template>
                                                
                                                <!-- Shape Component -->
                                                <template x-if="component.type === 'shape'">
                                                    <div class="h-full w-full flex items-center justify-center"
                                                         :style="`transform: rotate(${component.data.rotation || 0}deg);`">
                                                        <!-- Rectangle -->
                                                        <template x-if="component.data.shapeType === 'rectangle'">
                                                            <div class="w-full h-full"
                                                                 :style="`
                                                                     background-color: ${component.data.fillColor || 'transparent'};
                                                                     border: ${component.data.borderWidth || 0}px ${component.data.borderStyle || 'solid'} ${component.data.borderColor || '#000000'};
                                                                     border-radius: ${component.data.borderRadius || '0px'};
                                                                 `">
                                                            </div>
                                                        </template>
                                                        
                                                        <!-- Circle -->
                                                        <template x-if="component.data.shapeType === 'circle'">
                                                            <div class="w-full h-full rounded-full"
                                                                 :style="`
                                                                     background-color: ${component.data.fillColor || 'transparent'};
                                                                     border: ${component.data.borderWidth || 0}px ${component.data.borderStyle || 'solid'} ${component.data.borderColor || '#000000'};
                                                                 `">
                                                            </div>
                                                        </template>
                                                        
                                                        <!-- Triangle -->
                                                        <template x-if="component.data.shapeType === 'triangle'">
                                                            <svg class="w-full h-full" viewBox="0 0 100 100" preserveAspectRatio="none">
                                                                <polygon :points="component.data.points || '50,10 90,90 10,90'"
                                                                         :fill="component.data.fillColor || 'transparent'"
                                                                         :stroke="component.data.borderColor || '#000000'"
                                                                         :stroke-width="component.data.borderWidth || 0">
                                                                </polygon>
                                                            </svg>
                                                        </template>
                                                        
                                                        <!-- Diamond -->
                                                        <template x-if="component.data.shapeType === 'diamond'">
                                                            <svg class="w-full h-full" viewBox="0 0 100 100" preserveAspectRatio="none">
                                                                <polygon :points="component.data.points || '50,10 90,50 50,90 10,50'"
                                                                         :fill="component.data.fillColor || 'transparent'"
                                                                         :stroke="component.data.borderColor || '#000000'"
                                                                         :stroke-width="component.data.borderWidth || 0">
                                                                </polygon>
                                                            </svg>
                                                        </template>
                                                        
                                                        <!-- Hexagon -->
                                                        <template x-if="component.data.shapeType === 'hexagon'">
                                                            <svg class="w-full h-full" viewBox="0 0 100 100" preserveAspectRatio="none">
                                                                <polygon :points="component.data.points || '50,10 85,25 85,75 50,90 15,75 15,25'"
                                                                         :fill="component.data.fillColor || 'transparent'"
                                                                         :stroke="component.data.borderColor || '#000000'"
                                                                         :stroke-width="component.data.borderWidth || 0">
                                                                </polygon>
                                                            </svg>
                                                        </template>
                                                        
                                                        <!-- Star -->
                                                        <template x-if="component.data.shapeType === 'star'">
                                                            <svg class="w-full h-full" viewBox="0 0 100 100" preserveAspectRatio="none">
                                                                <polygon :points="component.data.points || '50,10 61,35 90,35 68,57 79,82 50,70 21,82 32,57 10,35 39,35'"
                                                                         :fill="component.data.fillColor || 'transparent'"
                                                                         :stroke="component.data.borderColor || '#000000'"
                                                                         :stroke-width="component.data.borderWidth || 0">
                                                                </polygon>
                                                            </svg>
                                                        </template>
                                                    </div>
                                                </template>
                                            </div>
                                            
                                            <!-- Component Controls -->
                                            <div x-show="!isPreviewMode" class="absolute top-1 right-1 flex gap-1">
                                                <button @click.stop="duplicateComponent(component)" class="p-1 bg-blue-500 text-white rounded text-xs hover:bg-blue-600">
                                                    <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                                                    </svg>
                                                </button>
                                                <button @click.stop="deleteComponent(component)" class="p-1 bg-red-500 text-white rounded text-xs hover:bg-red-600">
                                                    <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                                    </svg>
                                                </button>
                                            </div>
                                            
                                            <!-- Rotation Handle (only show when selected and not in preview mode) -->
                                            <template x-if="selectedComponent?.id === component.id && !isPreviewMode">
                                                <div @mousedown="startRotate($event, component)" 
                                                     class="absolute -top-8 left-1/2 w-6 h-6 bg-orange-500 cursor-grab transform -translate-x-1/2 rounded-full z-20 hover:bg-orange-600 transition-colors flex items-center justify-center"
                                                     title="Rotate component">
                                                    <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                                                    </svg>
                                                </div>
                                            </template>
                                            
                                            <!-- Resize Handles (only show when selected and not in preview mode) -->
                                            <template x-if="selectedComponent?.id === component.id && !isPreviewMode">
                                                <!-- Top handles -->
                                                <div @mousedown="startResize($event, component, 'nw')" 
                                                     class="absolute top-0 left-0 w-3 h-3 bg-blue-500 cursor-nw-resize transform -translate-x-1 -translate-y-1 rounded-sm z-20 hover:bg-blue-600 transition-colors"
                                                     title="Resize from top-left corner"></div>
                                                <div @mousedown="startResize($event, component, 'n')" 
                                                     class="absolute top-0 left-1/2 w-3 h-3 bg-blue-500 cursor-n-resize transform -translate-x-1/2 -translate-y-1 rounded-sm z-20 hover:bg-blue-600 transition-colors"
                                                     title="Resize from top edge"></div>
                                                <div @mousedown="startResize($event, component, 'ne')" 
                                                     class="absolute top-0 right-0 w-3 h-3 bg-blue-500 cursor-ne-resize transform translate-x-1 -translate-y-1 rounded-sm z-20 hover:bg-blue-600 transition-colors"
                                                     title="Resize from top-right corner"></div>
                                                
                                                <!-- Middle edge handles -->
                                                <div @mousedown="startResize($event, component, 'w')" 
                                                     class="absolute top-1/2 left-0 w-3 h-3 bg-blue-500 cursor-w-resize transform -translate-x-1 -translate-y-1/2 rounded-sm z-20 hover:bg-blue-600 transition-colors"
                                                     title="Resize from left edge"></div>
                                                <div @mousedown="startResize($event, component, 'e')" 
                                                     class="absolute top-1/2 right-0 w-3 h-3 bg-blue-500 cursor-e-resize transform translate-x-1 -translate-y-1/2 rounded-sm z-20 hover:bg-blue-600 transition-colors"
                                                     title="Resize from right edge"></div>
                                                
                                                <!-- Bottom handles -->
                                                <div @mousedown="startResize($event, component, 'sw')" 
                                                     class="absolute bottom-0 left-0 w-3 h-3 bg-blue-500 cursor-sw-resize transform -translate-x-1 translate-y-1 rounded-sm z-20 hover:bg-blue-600 transition-colors"
                                                     title="Resize from bottom-left corner"></div>
                                                <div @mousedown="startResize($event, component, 's')" 
                                                     class="absolute bottom-0 left-1/2 w-3 h-3 bg-blue-500 cursor-s-resize transform -translate-x-1/2 translate-y-1 rounded-sm z-20 hover:bg-blue-600 transition-colors"
                                                     title="Resize from bottom edge"></div>
                                                <div @mousedown="startResize($event, component, 'se')" 
                                                     class="absolute bottom-0 right-0 w-3 h-3 bg-blue-500 cursor-se-resize transform translate-x-1 translate-y-1 rounded-sm z-20 hover:bg-blue-600 transition-colors"
                                                     title="Resize from bottom-right corner"></div>
                                            </template>
                                        </div>
                                    </template>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Properties Panel -->
            <div x-show="showPropertiesPanel && !isPreviewMode" 
                 x-cloak
                 x-transition:enter="transition ease-out duration-300"
                 x-transition:enter-start="opacity-0 transform translate-x-full"
                 x-transition:enter-end="opacity-100 transform translate-x-0"
                 x-transition:leave="transition ease-in duration-300"
                 x-transition:leave-start="opacity-100 transform translate-x-0"
                 x-transition:leave-end="opacity-0 transform translate-x-full"
                 class="properties-panel w-72 border-l border-neutral-200 bg-white dark:border-neutral-700 dark:bg-neutral-900 relative z-50"
                 style="min-height: 100vh;">
                
                <div class="p-4">
                    <div class="flex items-center justify-between mb-4">
                        <div>
                            <flux:heading size="sm" x-text="selectedComponent ? 'Component Properties' : 'Page Properties'">{{ __('Properties') }}</flux:heading>
                            <flux:text x-show="selectedPage && !selectedComponent" class="text-xs text-neutral-500 dark:text-neutral-400" x-text="'Editing: ' + selectedPage.name"></flux:text>
                        </div>
                        <div class="flex items-center gap-2">
                            <!-- Background Preview Button -->
                            <button x-show="selectedComponent === null && selectedPage" 
                                    @click="showBackgroundPreview = !showBackgroundPreview"
                                    :class="showBackgroundPreview ? 'bg-blue-500 text-white' : 'bg-neutral-200 text-neutral-700 dark:bg-neutral-700 dark:text-neutral-300'"
                                    class="px-2 py-1 rounded text-xs hover:opacity-80 transition-colors">
                                <span x-text="showBackgroundPreview ? '{{ __('Hide') }}' : '{{ __('Preview') }}'"></span>
                            </button>
                            <button @click="selectedComponent = null; selectedPage = null" class="text-neutral-400 hover:text-neutral-600 dark:hover:text-neutral-300">
                                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                                </svg>
                            </button>
                        </div>
                    </div>
                    
                    <div class="space-y-4">
                        <!-- Component Type -->
                        <div>
                            <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('Component Type') }}</flux:text>
                            <div class="p-3 bg-neutral-50 rounded-lg dark:bg-neutral-800">
                                <flux:text class="text-sm font-medium" x-text="selectedComponent.type"></flux:text>
                            </div>
                        </div>

                        <!-- Page Background Settings -->
                        <div x-show="selectedComponent === null && selectedPage">
                            <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('Page Background') }}</flux:text>
                            <div class="space-y-4">
                                <!-- Background Type -->
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Background Type') }}</flux:text>
                                    <select x-model="selectedPage.background.type" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        <option value="color">Solid Color</option>
                                        <option value="image">Image</option>
                                        <option value="gif">Animated GIF</option>
                                        <option value="gradient">Gradient</option>
                                        <option value="video">Video Background</option>
                                    </select>
                                </div>

                                <!-- Color Background -->
                                <template x-if="selectedPage.background.type === 'color'">
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Background Color') }}</flux:text>
                                        <div class="flex gap-2">
                                            <input type="color" x-model="selectedPage.background.color" class="w-16 h-10 rounded border border-neutral-200 dark:border-neutral-700">
                                            <input type="text" x-model="selectedPage.background.color" placeholder="#000000" class="flex-1 rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        </div>
                                    </div>
                                </template>

                                <!-- Image Background -->
                                <template x-if="selectedPage.background.type === 'image'">
                                    <div class="space-y-3">
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Background Image') }}</flux:text>
                                        <div class="flex gap-2">
                                            <input type="file" @change="handleImageUpload($event, 'image')" accept="image/*" class="flex-1 rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                            <flux:button variant="subtle" size="sm" @click="openImageLibrary()">
                                                {{ __('Library') }}
                                            </flux:button>
                                        </div>
                                        <div x-show="selectedPage.background.imageUrl" class="relative">
                                            <img :src="selectedPage.background.imageUrl" class="w-full h-24 object-cover rounded-lg border border-neutral-200 dark:border-neutral-700">
                                            <button @click="selectedPage.background.imageUrl = ''" class="absolute top-1 right-1 p-1 bg-red-500 text-white rounded-full hover:bg-red-600">
                                                <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                                                </svg>
                                            </button>
                                        </div>
                                        <!-- Image Options -->
                                        <div class="grid grid-cols-2 gap-2">
                                            <div>
                                                <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Position') }}</flux:text>
                                                <select x-model="selectedPage.background.imagePosition" class="w-full rounded border border-neutral-200 px-2 py-1 text-xs dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                                    <option value="center">Center</option>
                                                    <option value="top">Top</option>
                                                    <option value="bottom">Bottom</option>
                                                    <option value="left">Left</option>
                                                    <option value="right">Right</option>
                                                </select>
                                            </div>
                                            <div>
                                                <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Size') }}</flux:text>
                                                <select x-model="selectedPage.background.imageSize" class="w-full rounded border border-neutral-200 px-2 py-1 text-xs dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                                    <option value="cover">Cover</option>
                                                    <option value="contain">Contain</option>
                                                    <option value="auto">Auto</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </template>

                                <!-- GIF Background -->
                                <template x-if="selectedPage.background.type === 'gif'">
                                    <div class="space-y-3">
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Animated GIF') }}</flux:text>
                                        <div class="flex gap-2">
                                            <input type="file" @change="handleImageUpload($event, 'gif')" accept="image/gif" class="flex-1 rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                            <flux:button variant="subtle" size="sm" @click="openGifLibrary()">
                                                {{ __('GIF Library') }}
                                            </flux:button>
                                        </div>
                                        <div x-show="selectedPage.background.gifUrl" class="relative">
                                            <img :src="selectedPage.background.gifUrl" class="w-full h-24 object-cover rounded-lg border border-neutral-200 dark:border-neutral-700">
                                            <button @click="selectedPage.background.gifUrl = ''" class="absolute top-1 right-1 p-1 bg-red-500 text-white rounded-full hover:bg-red-600">
                                                <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                                                </svg>
                                            </button>
                                        </div>
                                        <div class="flex items-center gap-2">
                                            <input type="checkbox" x-model="selectedPage.background.gifLoop" id="gif-loop" class="rounded border-neutral-300 dark:border-neutral-600">
                                            <label for="gif-loop" class="text-sm text-neutral-600 dark:text-neutral-400">{{ __('Loop GIF') }}</label>
                                        </div>
                                    </div>
                                </template>

                                <!-- Gradient Background -->
                                <template x-if="selectedPage.background.type === 'gradient'">
                                    <div class="space-y-3">
                                        <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('Gradient Colors') }}</flux:text>
                                        <div class="grid grid-cols-2 gap-2">
                                            <div>
                                                <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Start Color') }}</flux:text>
                                                <div class="flex gap-1">
                                                    <input type="color" x-model="selectedPage.background.gradientStart" class="w-8 h-8 rounded border border-neutral-200 dark:border-neutral-700">
                                                    <input type="text" x-model="selectedPage.background.gradientStart" placeholder="#000000" class="flex-1 rounded border border-neutral-200 px-2 py-1 text-xs dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                                </div>
                                            </div>
                                            <div>
                                                <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('End Color') }}</flux:text>
                                                <div class="flex gap-1">
                                                    <input type="color" x-model="selectedPage.background.gradientEnd" class="w-8 h-8 rounded border border-neutral-200 dark:border-neutral-700">
                                                    <input type="text" x-model="selectedPage.background.gradientEnd" placeholder="#ffffff" class="flex-1 rounded border border-neutral-200 px-2 py-1 text-xs dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                                </div>
                                            </div>
                                        </div>
                                        <div>
                                            <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Direction') }}</flux:text>
                                            <select x-model="selectedPage.background.gradientDirection" class="w-full rounded border border-neutral-200 px-2 py-1 text-xs dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                                <option value="to bottom">Top to Bottom</option>
                                                <option value="to right">Left to Right</option>
                                                <option value="to bottom right">Diagonal</option>
                                                <option value="45deg">45° Angle</option>
                                            </select>
                                        </div>
                                    </div>
                                </template>

                                <!-- Video Background -->
                                <template x-if="selectedPage.background.type === 'video'">
                                    <div class="space-y-3">
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Background Video') }}</flux:text>
                                        <input type="url" x-model="selectedPage.background.videoUrl" placeholder="https://example.com/video.mp4" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        <div class="grid grid-cols-2 gap-2">
                                            <div>
                                                <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Volume') }}</flux:text>
                                                <input type="range" x-model="selectedPage.background.videoVolume" min="0" max="100" value="0" class="w-full">
                                                <flux:text class="text-xs text-neutral-500" x-text="selectedPage.background.videoVolume + '%'">0%</flux:text>
                                            </div>
                                            <div>
                                                <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Loop') }}</flux:text>
                                                <input type="checkbox" x-model="selectedPage.background.videoLoop" class="rounded border-neutral-300 dark:border-neutral-600">
                                            </div>
                                        </div>
                                    </div>
                                </template>

                                <!-- Background Overlay -->
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Background Overlay') }}</flux:text>
                                    <div class="grid grid-cols-2 gap-2">
                                        <div>
                                            <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Overlay Color') }}</flux:text>
                                            <input type="color" x-model="selectedPage.background.overlayColor" class="w-full h-8 rounded border border-neutral-200 dark:border-neutral-700">
                                        </div>
                                        <div>
                                            <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Opacity') }}</flux:text>
                                            <input type="range" x-model="selectedPage.background.overlayOpacity" min="0" max="100" value="0" class="w-full">
                                            <flux:text class="text-xs text-neutral-500" x-text="selectedPage.background.overlayOpacity + '%'">0%</flux:text>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- No Page Selected Message -->
                        <div x-show="!selectedPage" class="text-center py-8">
                            <svg class="mx-auto h-12 w-12 text-neutral-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 002 2v12a2 2 0 002 2z"/>
                            </svg>
                            <flux:text class="text-lg font-medium text-neutral-600 dark:text-neutral-400 mb-2">{{ __('No Page Selected') }}</flux:text>
                            <flux:text class="text-sm text-neutral-500 dark:text-neutral-500">{{ __('Click on a page in the Pages sidebar to edit its background and properties') }}</flux:text>
                        </div>

                        <!-- Component Properties Container -->
                        <div class="space-y-3">
                            <!-- Position & Size Section -->
                            <div class="border border-neutral-200 rounded-lg p-4 bg-neutral-50 dark:bg-neutral-800 dark:border-neutral-700">
                                <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-3">{{ __('Position & Size') }}</flux:text>
                                <div class="space-y-3">
                                    <div>
                                        <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('X') }}</flux:text>
                                        <input type="number" x-model.number="selectedComponent.x" class="w-full rounded border border-neutral-200 px-2 py-1 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                    </div>
                                    <div>
                                        <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Y') }}</flux:text>
                                        <input type="number" x-model.number="selectedComponent.y" class="w-full rounded border border-neutral-200 px-2 py-1 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                    </div>
                                    <div>
                                        <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Width') }}</flux:text>
                                        <input type="number" x-model.number="selectedComponent.width" class="w-full rounded border border-neutral-200 px-2 py-1 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                    </div>
                                    <div>
                                        <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Height') }}</flux:text>
                                        <input type="number" x-model.number="selectedComponent.height" class="w-full rounded border border-neutral-200 px-2 py-1 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                    </div>
                                </div>
                                
                                <!-- Resize Status -->
                                <div x-show="resizing" class="mt-3 p-2 bg-orange-100 text-orange-800 text-xs rounded border border-orange-200 dark:bg-orange-900/20 dark:text-orange-200 dark:border-orange-800">
                                    🔄 Resizing component...
                                    <div class="mt-1 text-xs">
                                        <div>Start: (<span x-text="resizeStartComponentX"></span>, <span x-text="resizeStartComponentY"></span>)</div>
                                        <div>Current: (<span x-text="selectedComponent.x"></span>, <span x-text="selectedComponent.y"></span>)</div>
                                        <div>Size: <span x-text="selectedComponent.width"></span> × <span x-text="selectedComponent.height"></span></div>
                                    </div>
                                </div>
                            </div>

                            <!-- Component Specific Properties -->
                        <template x-if="selectedComponent.type === 'header'">
                            <!-- Component Properties Accordion -->
                            <div class="space-y-3">
                                <!-- Component Properties Section -->
                                <div class="border border-neutral-200 rounded-lg dark:border-neutral-700">
                                    <button @click="toggleAccordionSection('component')" 
                                            class="w-full px-4 py-3 text-left flex items-center justify-between hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-all duration-300 ease-out hover:shadow-sm rounded-t-lg">
                                        <flux:text class="text-sm font-medium text-neutral-700 dark:text-neutral-300">{{ __('Component Properties') }}</flux:text>
                                        <svg class="w-5 h-5 text-neutral-400 transition-all duration-500 ease-out" 
                                             :class="openAccordionSection === 'component' ? 'rotate-180 scale-110' : 'scale-100'"
                                             fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                                        </svg>
                                    </button>
                                    <div x-show="openAccordionSection === 'component'" 
                                         x-transition:enter="transition ease-out duration-500"
                                         x-transition:enter-start="opacity-0 transform -translate-y-4 scale-95"
                                         x-transition:enter-end="opacity-100 transform translate-y-0 scale-100"
                                         x-transition:leave="transition ease-in duration-400"
                                         x-transition:leave-start="opacity-100 transform translate-y-0 scale-100"
                                         x-transition:leave-end="opacity-0 transform -translate-y-4 scale-95"
                                         class="px-4 pb-4 space-y-3 overflow-hidden">
                                        <div>
                                            <flux:text class="text-sm font-medium mb-2 block">{{ __('Title') }}</flux:text>
                                            <input type="text" x-model="selectedComponent.data.title" placeholder="Welcome" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        </div>
                                        <div>
                                            <flux:text class="text-sm font-medium mb-2 block">{{ __('Subtitle') }}</flux:text>
                                            <input type="text" x-model="selectedComponent.data.subtitle" placeholder="Subtitle" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Font Properties Section -->
                                <div class="border border-neutral-200 rounded-lg dark:border-neutral-700">
                                    <button @click="toggleAccordionSection('font')" 
                                            class="w-full px-4 py-3 text-left flex items-center justify-between hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-all duration-300 ease-out hover:shadow-sm rounded-t-lg">
                                        <flux:text class="text-sm font-medium text-neutral-700 dark:text-neutral-300">{{ __('Font Properties') }}</flux:text>
                                        <svg class="w-5 h-5 text-neutral-400 transition-all duration-500 ease-out" 
                                             :class="openAccordionSection === 'font' ? 'rotate-180 scale-110' : 'scale-100'"
                                             fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                                        </svg>
                                    </button>
                                    <div x-show="openAccordionSection === 'font'" 
                                         x-transition:enter="transition ease-out duration-500"
                                         x-transition:enter-start="opacity-0 transform -translate-y-4 scale-95"
                                         x-transition:enter-end="opacity-100 transform translate-y-0 scale-100"
                                         x-transition:leave="transition ease-in duration-400"
                                         x-transition:leave-start="opacity-100 transform translate-y-0 scale-100"
                                         x-transition:leave-end="opacity-0 transform -translate-y-4 scale-95"
                                         class="px-4 pb-4 overflow-hidden">
                                        <div>
                                            <flux:text class="text-sm font-medium mb-2 block">{{ __('Font Family') }}</flux:text>
                                            <select x-model="selectedComponent.data.fontFamily" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                                <option value="font-sans">Sans Serif</option>
                                                <option value="font-serif">Serif</option>
                                                <option value="font-mono">Monospace</option>
                                                <option value="font-display">Display</option>
                                                <option value="font-handwriting">Handwriting</option>
                                            </select>
                                        </div>
                                        <div>
                                            <flux:text class="text-sm font-medium mb-2 block">{{ __('Font Size') }}</flux:text>
                                            <select x-model="selectedComponent.data.fontSize" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                                <option value="8">8pt</option>
                                                <option value="10">10pt</option>
                                                <option value="12">12pt</option>
                                                <option value="14">14pt</option>
                                                <option value="16">16pt</option>
                                                <option value="18">18pt</option>
                                                <option value="20">20pt</option>
                                                <option value="24">24pt</option>
                                                <option value="28">28pt</option>
                                                <option value="32">32pt</option>
                                                <option value="36">36pt</option>
                                                <option value="48">48pt</option>
                                                <option value="64">64pt</option>
                                                <option value="72">72pt</option>
                                                <option value="96">96pt</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Rotation Section -->
                                <div class="border border-neutral-200 rounded-lg dark:border-neutral-700">
                                    <button @click="toggleAccordionSection('rotation')" 
                                            class="w-full px-4 py-3 text-left flex items-center justify-between hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-all duration-300 ease-out hover:shadow-sm rounded-t-lg">
                                        <flux:text class="text-sm font-medium text-neutral-700 dark:text-neutral-300">{{ __('Rotation') }}</flux:text>
                                        <svg class="w-5 h-5 text-neutral-400 transition-all duration-500 ease-out" 
                                             :class="openAccordionSection === 'rotation' ? 'rotate-180 scale-110' : 'scale-100'"
                                             fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                                        </svg>
                                    </button>
                                    <div x-show="openAccordionSection === 'rotation'" 
                                         x-transition:enter="transition ease-out duration-500"
                                         x-transition:enter-start="opacity-0 transform -translate-y-4 scale-95"
                                         x-transition:enter-end="opacity-100 transform translate-y-0 scale-100"
                                         x-transition:leave="transition ease-in duration-400"
                                         x-transition:leave-start="opacity-100 transform translate-y-0 scale-100"
                                         x-transition:leave-end="opacity-0 transform -translate-y-4 scale-95"
                                         class="px-4 pb-4 overflow-hidden">
                                        <div class="space-y-2">
                                            <div class="flex items-center gap-2">
                                                <input type="range" 
                                                       x-model="selectedComponent.data.rotation" 
                                                       min="0" 
                                                       max="360" 
                                                       step="1" 
                                                       class="flex-1 h-2 bg-neutral-200 rounded-lg appearance-none cursor-pointer dark:bg-neutral-700">
                                                <input type="number" 
                                                       x-model="selectedComponent.data.rotation" 
                                                       min="0" 
                                                       max="360" 
                                                       step="1" 
                                                       class="w-16 rounded-lg border border-neutral-200 bg-white px-2 py-1 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                                <flux:text class="text-xs text-neutral-600 dark:text-neutral-400">°</flux:text>
                                            </div>
                                            <div class="flex gap-2">
                                                <button @click="selectedComponent.data.rotation = 0" class="px-3 py-1 bg-neutral-200 text-neutral-700 text-xs rounded hover:bg-neutral-300 dark:bg-neutral-700 dark:text-neutral-300 dark:hover:bg-neutral-600">0°</button>
                                                <button @click="selectedComponent.data.rotation = 90" class="px-3 py-1 bg-neutral-200 text-neutral-700 text-xs rounded hover:bg-neutral-300 dark:bg-neutral-700 dark:text-neutral-300 dark:hover:bg-neutral-600">90°</button>
                                                <button @click="selectedComponent.data.rotation = 180" class="px-3 py-1 bg-neutral-200 text-neutral-700 text-xs rounded hover:bg-neutral-300 dark:bg-neutral-700 dark:text-neutral-300 dark:hover:bg-neutral-600">180°</button>
                                                <button @click="selectedComponent.data.rotation = 270" class="px-3 py-1 bg-neutral-200 text-neutral-700 text-xs rounded hover:bg-neutral-300 dark:bg-neutral-700 dark:text-neutral-300 dark:hover:bg-neutral-600">270°</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </template>

                        <template x-if="selectedComponent.type === 'text-block'">
                            <div class="space-y-4">
                                <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('Text Properties') }}</flux:text>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Text Content') }}</flux:text>
                                    <textarea rows="3" x-model="selectedComponent.data.text" placeholder="Enter text content" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white"></textarea>
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Font Family') }}</flux:text>
                                    <select x-model="selectedComponent.data.fontFamily" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        <option value="font-sans">Sans Serif</option>
                                        <option value="font-serif">Serif</option>
                                        <option value="font-mono">Monospace</option>
                                        <option value="font-display">Display</option>
                                        <option value="font-handwriting">Handwriting</option>
                                    </select>
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Font Size') }}</flux:text>
                                    <select x-model="selectedComponent.data.fontSize" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        <option value="8">8pt</option>
                                        <option value="10">10pt</option>
                                        <option value="12">12pt</option>
                                        <option value="14">14pt</option>
                                        <option value="16">16pt</option>
                                        <option value="18">18pt</option>
                                        <option value="20">20pt</option>
                                        <option value="24">24pt</option>
                                        <option value="28">28pt</option>
                                        <option value="32">32pt</option>
                                        <option value="36">36pt</option>
                                        <option value="48">48pt</option>
                                        <option value="64">64pt</option>
                                        <option value="72">72pt</option>
                                        <option value="96">96pt</option>
                                    </select>
                                </div>
                            </div>
                        </template>

                        <template x-if="selectedComponent.type === 'weather'">
                            <div class="space-y-4">
                                <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('Weather Properties') }}</flux:text>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Temperature') }}</flux:text>
                                    <input type="text" x-model="selectedComponent.data.temperature" placeholder="72°F" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Condition') }}</flux:text>
                                    <input type="text" x-model="selectedComponent.data.condition" placeholder="Sunny" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Font Family') }}</flux:text>
                                    <select x-model="selectedComponent.data.fontFamily" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        <option value="font-sans">Sans Serif</option>
                                        <option value="font-serif">Serif</option>
                                        <option value="font-mono">Monospace</option>
                                        <option value="font-display">Display</option>
                                        <option value="font-handwriting">Handwriting</option>
                                    </select>
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Font Size') }}</flux:text>
                                    <select x-model="selectedComponent.data.fontSize" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        <option value="8">8pt</option>
                                        <option value="10">10pt</option>
                                        <option value="12">12pt</option>
                                        <option value="14">14pt</option>
                                        <option value="16">16pt</option>
                                        <option value="18">18pt</option>
                                        <option value="20">20pt</option>
                                        <option value="24">24pt</option>
                                        <option value="28">28pt</option>
                                        <option value="32">32pt</option>
                                        <option value="36">36pt</option>
                                        <option value="48">48pt</option>
                                        <option value="64">64pt</option>
                                        <option value="72">72pt</option>
                                        <option value="96">96pt</option>
                                    </select>
                                </div>
                            </div>
                        </template>

                        <template x-if="selectedComponent.type === 'clock'">
                            <div class="space-y-4">
                                <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('Clock Properties') }}</flux:text>
                                
                                <!-- Clock Style Selection -->
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Clock Style') }}</flux:text>
                                    <select x-model="selectedComponent.data.style" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        <optgroup label="Digital Clocks">
                                            <option value="digital-modern">Modern Digital</option>
                                            <option value="digital-minimal">Minimal Digital</option>
                                            <option value="digital-bold">Bold Digital</option>
                                            <option value="digital-elegant">Elegant Digital</option>
                                        </optgroup>
                                        <optgroup label="Analogue Clocks">
                                            <option value="analogue-classic">Classic Analogue</option>
                                            <option value="analogue-minimal">Minimal Analogue</option>
                                            <option value="analogue-elegant">Elegant Analogue</option>
                                        </optgroup>
                                    </select>
                                </div>

                                <!-- Clock Presets -->
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Quick Presets') }}</flux:text>
                                    <div class="grid grid-cols-2 gap-2">
                                        <button @click="applyClockPreset('digital-modern')" class="px-3 py-2 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 transition-colors">Modern</button>
                                        <button @click="applyClockPreset('digital-minimal')" class="px-3 py-2 bg-gray-600 text-white text-xs rounded hover:bg-gray-700 transition-colors">Minimal</button>
                                        <button @click="applyClockPreset('digital-bold')" class="px-3 py-2 bg-black text-white text-xs rounded hover:bg-gray-800 transition-colors">Bold</button>
                                        <button @click="applyClockPreset('digital-elegant')" class="px-3 py-2 bg-purple-600 text-white text-xs rounded hover:bg-purple-700 transition-colors">Elegant</button>
                                        <button @click="applyClockPreset('analogue-classic')" class="px-3 py-2 bg-green-600 text-white text-xs rounded hover:bg-green-700 transition-colors">Classic</button>
                                        <button @click="applyClockPreset('analogue-elegant')" class="px-3 py-2 bg-amber-600 text-white text-xs rounded hover:bg-amber-700 transition-colors">Vintage</button>
                                    </div>
                                </div>

                                <!-- Time Format -->
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Time Format') }}</flux:text>
                                    <select x-model="selectedComponent.data.timeFormat" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        <option value="12h">12 Hour (AM/PM)</option>
                                        <option value="24h">24 Hour</option>
                                    </select>
                                </div>

                                <!-- Display Options -->
                                <div class="space-y-3">
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Display Options') }}</flux:text>
                                    
                                    <div class="flex items-center justify-between">
                                        <flux:text class="text-sm">{{ __('Show Seconds') }}</flux:text>
                                        <input type="checkbox" x-model="selectedComponent.data.showSeconds" class="rounded border-neutral-200 text-blue-600 focus:ring-blue-500">
                                    </div>
                                    
                                    <div class="flex items-center justify-between">
                                        <flux:text class="text-sm">{{ __('Show Date') }}</flux:text>
                                        <input type="checkbox" x-model="selectedComponent.data.showDate" class="rounded border-neutral-200 text-blue-600 focus:ring-blue-500">
                                    </div>
                                    
                                    <div class="flex items-center justify-between">
                                        <flux:text class="text-sm">{{ __('Show Day') }}</flux:text>
                                        <input type="checkbox" x-model="selectedComponent.data.showDay" class="rounded border-neutral-200 text-blue-600 focus:ring-blue-500">
                                    </div>
                                </div>

                                <!-- Content -->
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Time') }}</flux:text>
                                    <input type="text" x-model="selectedComponent.data.time" placeholder="12:00" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                </div>
                                
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Date') }}</flux:text>
                                    <input type="text" x-model="selectedComponent.data.date" placeholder="Today" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                </div>

                                <!-- Visual Customization -->
                                <div class="space-y-3">
                                    <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('Visual Style') }}</flux:text>
                                    
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Background Color') }}</flux:text>
                                        <div class="flex gap-2">
                                            <input type="color" x-model="selectedComponent.data.backgroundColor" class="w-16 h-10 rounded border border-neutral-200 dark:border-neutral-700">
                                            <input type="text" x-model="selectedComponent.data.backgroundColor" placeholder="transparent" class="flex-1 rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        </div>
                                    </div>
                                    
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Text Color') }}</flux:text>
                                        <div class="flex gap-2">
                                            <input type="color" x-model="selectedComponent.data.textColor" class="w-16 h-10 rounded border border-neutral-200 dark:border-neutral-700">
                                            <input type="text" x-model="selectedComponent.data.textColor" placeholder="#1f2937" class="flex-1 rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        </div>
                                    </div>
                                    
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Border Color') }}</flux:text>
                                        <div class="flex gap-2">
                                            <input type="color" x-model="selectedComponent.data.borderColor" class="w-16 h-10 rounded border border-neutral-200 dark:border-neutral-700">
                                            <input type="text" x-model="selectedComponent.data.borderColor" placeholder="#d1d5db" class="flex-1 rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        </div>
                                    </div>
                                    
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Border Width') }}</flux:text>
                                        <input type="number" x-model="selectedComponent.data.borderWidth" min="0" max="10" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                    </div>
                                    
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Border Radius') }}</flux:text>
                                        <select x-model="selectedComponent.data.borderRadius" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                            <option value="0px">None</option>
                                            <option value="4px">Small</option>
                                            <option value="8px">Medium</option>
                                            <option value="12px">Large</option>
                                            <option value="16px">Extra Large</option>
                                            <option value="50%">Round</option>
                                        </select>
                                    </div>
                                    
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Padding') }}</flux:text>
                                        <input type="number" x-model="selectedComponent.data.padding" min="0" max="50" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                    </div>
                                    
                                    <div class="flex items-center justify-between">
                                        <flux:text class="text-sm">{{ __('Shadow') }}</flux:text>
                                        <input type="checkbox" x-model="selectedComponent.data.shadow" class="rounded border-neutral-200 text-blue-600 focus:ring-blue-500">
                                    </div>
                                </div>

                                <!-- Typography -->
                                <div class="space-y-3">
                                    <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('Typography') }}</flux:text>
                                    
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Font Family') }}</flux:text>
                                        <select x-model="selectedComponent.data.fontFamily" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                            <option value="font-sans">Sans Serif</option>
                                            <option value="font-serif">Serif</option>
                                            <option value="font-mono">Monospace</option>
                                            <option value="font-display">Display</option>
                                            <option value="font-handwriting">Handwriting</option>
                                        </select>
                                    </div>
                                    
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Font Size') }}</flux:text>
                                        <select x-model="selectedComponent.data.fontSize" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                            <option value="8">8pt</option>
                                            <option value="10">10pt</option>
                                            <option value="12">12pt</option>
                                            <option value="14">14pt</option>
                                            <option value="16">16pt</option>
                                            <option value="18">18pt</option>
                                            <option value="20">20pt</option>
                                            <option value="24">24pt</option>
                                            <option value="28">28pt</option>
                                            <option value="32">32pt</option>
                                            <option value="36">36pt</option>
                                            <option value="48">48pt</option>
                                            <option value="64">64pt</option>
                                            <option value="72">72pt</option>
                                            <option value="96">96pt</option>
                                        </select>
                                    </div>
                                </div>

                                <!-- Position & Rotation -->
                                <div class="space-y-3">
                                    <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('Position & Rotation') }}</flux:text>
                                    
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Rotation') }}</flux:text>
                                        <input type="number" x-model="selectedComponent.data.rotation" min="0" max="360" step="1" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                    </div>
                                </div>
                            </div>
                        </template>

                        <template x-if="selectedComponent.type === 'events'">
                            <div class="space-y-4">
                                <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('Events Properties') }}</flux:text>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Title') }}</flux:text>
                                    <input type="text" x-model="selectedComponent.data.title" placeholder="Events" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Event 1') }}</flux:text>
                                    <input type="text" x-model="selectedComponent.data.event1" placeholder="Event 1" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Event 2') }}</flux:text>
                                    <input type="text" x-model="selectedComponent.data.event2" placeholder="Event 2" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Font Family') }}</flux:text>
                                    <select x-model="selectedComponent.data.fontFamily" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        <option value="font-sans">Sans Serif</option>
                                        <option value="font-serif">Serif</option>
                                        <option value="font-mono">Monospace</option>
                                        <option value="font-display">Display</option>
                                        <option value="font-handwriting">Handwriting</option>
                                    </select>
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Font Size') }}</flux:text>
                                    <select x-model="selectedComponent.data.fontSize" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        <option value="8">8pt</option>
                                        <option value="10">10pt</option>
                                        <option value="12">12pt</option>
                                        <option value="14">14pt</option>
                                        <option value="16">16pt</option>
                                        <option value="18">18pt</option>
                                        <option value="20">20pt</option>
                                        <option value="24">24pt</option>
                                        <option value="28">28pt</option>
                                        <option value="32">32pt</option>
                                        <option value="36">36pt</option>
                                        <option value="48">48pt</option>
                                        <option value="64">64pt</option>
                                        <option value="72">72pt</option>
                                        <option value="96">96pt</option>
                                    </select>
                                </div>
                            </div>
                        </template>

                        <template x-if="selectedComponent.type === 'menu'">
                            <div class="space-y-4">
                                <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('Menu Properties') }}</flux:text>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Title') }}</flux:text>
                                    <input type="text" x-model="selectedComponent.data.title" placeholder="Menu" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Item 1') }}</flux:text>
                                    <input type="text" x-model="selectedComponent.data.item1" placeholder="Item 1" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Item 2') }}</flux:text>
                                    <input type="text" x-model="selectedComponent.data.item2" placeholder="Item 2" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Font Family') }}</flux:text>
                                    <select x-model="selectedComponent.data.fontFamily" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        <option value="font-sans">Sans Serif</option>
                                        <option value="font-serif">Serif</option>
                                        <option value="font-mono">Monospace</option>
                                        <option value="font-display">Display</option>
                                        <option value="font-handwriting">Handwriting</option>
                                    </select>
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Font Size') }}</flux:text>
                                    <select x-model="selectedComponent.data.fontSize" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        <option value="8">8pt</option>
                                        <option value="10">10pt</option>
                                        <option value="12">12pt</option>
                                        <option value="14">14pt</option>
                                        <option value="16">16pt</option>
                                        <option value="18">18pt</option>
                                        <option value="20">20pt</option>
                                        <option value="24">24pt</option>
                                        <option value="28">28pt</option>
                                        <option value="32">32pt</option>
                                        <option value="36">36pt</option>
                                        <option value="48">48pt</option>
                                        <option value="64">64pt</option>
                                        <option value="72">72pt</option>
                                        <option value="96">96pt</option>
                                    </select>
                                </div>
                            </div>
                        </template>

                        <template x-if="selectedComponent.type === 'button'">
                            <div class="space-y-4">
                                <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('Button Properties') }}</flux:text>
                                
                                <!-- Basic Properties -->
                                <div class="space-y-3">
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Button Text') }}</flux:text>
                                        <input type="text" x-model="selectedComponent.data.text" placeholder="Click Me" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                    </div>
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Target Page') }}</flux:text>
                                        <select x-model="selectedComponent.data.targetPage" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                            <option value="">No Page</option>
                                            <template x-for="page in pages" :key="page.id">
                                                <option :value="page.id" x-text="page.name"></option>
                                            </template>
                                        </select>
                                    </div>
                                </div>
                                
                                <!-- Icon Properties -->
                                <div class="space-y-3">
                                    <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('Icon Settings') }}</flux:text>
                                    
                                    <!-- Icon Selection -->
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Icon') }}</flux:text>
                                        <select x-model="selectedComponent.data.icon" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                            <template x-for="icon in iconLibrary" :key="icon.name">
                                                <option :value="icon.name" x-text="icon.label"></option>
                                            </template>
                                        </select>
                                    </div>
                                    
                                    <!-- Icon Position -->
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Icon Position') }}</flux:text>
                                        <select x-model="selectedComponent.data.iconPosition" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                            <option value="left">Left</option>
                                            <option value="right">Right</option>
                                        </select>
                                    </div>
                                    
                                    <!-- Icon Size -->
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Icon Size') }}</flux:text>
                                        <select x-model="selectedComponent.data.iconSize" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                            <option value="text-xs">Extra Small</option>
                                            <option value="text-sm">Small</option>
                                            <option value="text-base">Base</option>
                                            <option value="text-lg">Large</option>
                                            <option value="text-xl">Extra Large</option>
                                            <option value="text-2xl">2XL</option>
                                            <option value="text-3xl">3XL</option>
                                        </select>
                                    </div>
                                    
                                    <!-- Icon Color -->
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Icon Color') }}</flux:text>
                                        <div class="flex gap-2">
                                            <input type="color" x-model="selectedComponent.data.iconColor" class="w-12 h-10 rounded border border-neutral-200">
                                            <input type="text" x-model="selectedComponent.data.iconColor" placeholder="#ffffff" class="flex-1 rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        </div>
                                    </div>
                                    
                                    <!-- Custom SVG Icon -->
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Custom SVG Icon') }}</flux:text>
                                        <textarea x-model="selectedComponent.data.customIcon" 
                                                  placeholder="<svg>...</svg> or leave empty to use preset icon" 
                                                  rows="3"
                                                  class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white font-mono text-xs"></textarea>
                                        <flux:text class="text-xs text-neutral-500 dark:text-neutral-400">Paste your SVG code here to override the preset icon</flux:text>
                                    </div>
                                    
                                    <!-- Icon Preview -->
                                    <div x-show="selectedComponent.data.icon !== 'none' || selectedComponent.data.customIcon">
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Icon Preview') }}</flux:text>
                                                                                    <div class="p-3 border border-neutral-200 rounded-lg bg-neutral-50 dark:bg-neutral-800 dark:border-neutral-700">
                                                <div class="flex items-center justify-center">
                                                    <span x-html="getIconHtml(selectedComponent)"
                                                          :class="selectedComponent.data.iconSize || 'text-base'"
                                                          :style="'color: ' + (selectedComponent.data.iconColor || selectedComponent.data.textColor || '#000000') + ';'">
                                                    </span>
                                                </div>
                                            </div>
                                    </div>
                                </div>
                                
                                <!-- Styling Section -->
                                <div class="space-y-3">
                                    <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('Styling') }}</flux:text>
                                    
                                    <!-- Quick Style Presets -->
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Quick Styles') }}</flux:text>
                                        <div class="grid grid-cols-2 gap-2">
                                            <button @click="applyButtonPreset('primary')" class="px-3 py-2 bg-blue-600 text-white text-xs rounded hover:bg-blue-700">Primary</button>
                                            <button @click="applyButtonPreset('secondary')" class="px-3 py-2 bg-gray-600 text-white text-xs rounded hover:bg-gray-700">Secondary</button>
                                            <button @click="applyButtonPreset('success')" class="px-3 py-2 bg-green-600 text-white text-xs rounded hover:bg-green-700">Success</button>
                                            <button @click="applyButtonPreset('danger')" class="px-3 py-2 bg-red-600 text-white text-xs rounded hover:bg-red-700">Danger</button>
                                        </div>
                                    </div>
                                    
                                    <!-- Background Color -->
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Background Color') }}</flux:text>
                                        <div class="flex gap-2">
                                            <input type="color" x-model="selectedComponent.data.backgroundColor" class="w-12 h-10 rounded border border-neutral-200">
                                            <input type="text" x-model="selectedComponent.data.backgroundColor" placeholder="#3b82f6" class="flex-1 rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        </div>
                                    </div>
                                    
                                    <!-- Text Color -->
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Text Color') }}</flux:text>
                                        <div class="flex gap-2">
                                            <input type="color" x-model="selectedComponent.data.textColor" class="w-12 h-10 rounded border border-neutral-200">
                                            <input type="text" x-model="selectedComponent.data.textColor" placeholder="#ffffff" class="flex-1 rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        </div>
                                    </div>
                                    
                                    <!-- Border -->
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Border') }}</flux:text>
                                        <div class="grid grid-cols-2 gap-2">
                                            <div>
                                                <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Width') }}</flux:text>
                                                <input type="number" x-model="selectedComponent.data.borderWidth" min="0" max="10" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                            </div>
                                            <div>
                                                <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Style') }}</flux:text>
                                                <select x-model="selectedComponent.data.borderStyle" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                                    <option value="solid">Solid</option>
                                                    <option value="dashed">Dashed</option>
                                                    <option value="dotted">Dotted</option>
                                                    <option value="double">Double</option>
                                                    <option value="none">None</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="mt-2">
                                            <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Color') }}</flux:text>
                                            <div class="flex gap-2">
                                                <input type="color" x-model="selectedComponent.data.borderColor" class="w-12 h-10 rounded border border-neutral-200">
                                                <input type="text" x-model="selectedComponent.data.borderColor" placeholder="#000000" class="flex-1 rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Typography -->
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Typography') }}</flux:text>
                                        <div class="grid grid-cols-2 gap-2">
                                            <div>
                                                <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Font Size') }}</flux:text>
                                                <select x-model="selectedComponent.data.fontSize" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                                    <option value="text-xs">Extra Small</option>
                                                    <option value="text-sm">Small</option>
                                                    <option value="text-base">Base</option>
                                                    <option value="text-lg">Large</option>
                                                    <option value="text-xl">Extra Large</option>
                                                    <option value="text-2xl">2XL</option>
                                                    <option value="text-3xl">3XL</option>
                                                </select>
                                            </div>
                                            <div>
                                                <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Font Weight') }}</flux:text>
                                                <select x-model="selectedComponent.data.fontWeight" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                                    <option value="font-normal">Normal</option>
                                                    <option value="font-medium">Medium</option>
                                                    <option value="font-semibold">Semi Bold</option>
                                                    <option value="font-bold">Bold</option>
                                                    <option value="font-extrabold">Extra Bold</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="mt-2">
                                            <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Font Family') }}</flux:text>
                                            <select x-model="selectedComponent.data.fontFamily" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                                <option value="font-sans">Sans Serif</option>
                                                <option value="font-serif">Serif</option>
                                                <option value="font-mono">Monospace</option>
                                                <option value="font-display">Display</option>
                                                <option value="font-handwriting">Handwriting</option>
                                            </select>
                                        </div>
                                    </div>
                                    
                                    <!-- Spacing & Layout -->
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Spacing & Layout') }}</flux:text>
                                        <div class="grid grid-cols-2 gap-2">
                                            <div>
                                                <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Padding X') }}</flux:text>
                                                <input type="number" x-model="selectedComponent.data.paddingX" min="0" max="20" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                            </div>
                                            <div>
                                                <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Padding Y') }}</flux:text>
                                                <input type="number" x-model="selectedComponent.data.paddingY" min="0" max="20" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                            </div>
                                        </div>
                                        <div class="mt-2">
                                            <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Border Radius') }}</flux:text>
                                            <select x-model="selectedComponent.data.borderRadius" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                                <option value="rounded-none">None</option>
                                                <option value="rounded-sm">Small</option>
                                                <option value="rounded">Default</option>
                                                <option value="rounded-md">Medium</option>
                                                <option value="rounded-lg">Large</option>
                                                <option value="rounded-xl">Extra Large</option>
                                                <option value="rounded-2xl">2XL</option>
                                                <option value="rounded-3xl">3XL</option>
                                                <option value="rounded-full">Full</option>
                                            </select>
                                        </div>
                                    </div>
                                    
                                    <!-- Hover Effects -->
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Hover Effects') }}</flux:text>
                                        <div class="space-y-2">
                                            <label class="flex items-center">
                                                <input type="checkbox" x-model="selectedComponent.data.hoverEffect" class="mr-2 rounded border-neutral-300">
                                                <flux:text class="text-sm">{{ __('Enable Hover Effects') }}</flux:text>
                                            </label>
                                            <div x-show="selectedComponent.data.hoverEffect" class="ml-4 space-y-2">
                                                <div>
                                                    <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Hover Background') }}</flux:text>
                                                    <div class="flex gap-2">
                                                        <input type="color" x-model="selectedComponent.data.hoverBackgroundColor" class="w-12 h-10 rounded border border-neutral-200">
                                                        <input type="text" x-model="selectedComponent.data.hoverBackgroundColor" placeholder="#2563eb" class="flex-1 rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                                    </div>
                                                </div>
                                                <div>
                                                    <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Hover Text Color') }}</flux:text>
                                                    <div class="flex gap-2">
                                                        <input type="color" x-model="selectedComponent.data.hoverBackgroundColor" class="w-12 h-10 rounded border border-neutral-200">
                                                        <input type="text" x-model="selectedComponent.data.hoverBackgroundColor" placeholder="#ffffff" class="flex-1 rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Rotation -->
                                    <div>
                                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Rotation') }}</flux:text>
                                        <div class="space-y-2">
                                            <div class="flex items-center gap-2">
                                                <input type="range" 
                                                       x-model="selectedComponent.data.rotation" 
                                                       min="0" 
                                                       max="360" 
                                                       step="1" 
                                                       class="flex-1 h-2 bg-neutral-200 rounded-lg appearance-none cursor-pointer dark:bg-neutral-700">
                                                <input type="number" 
                                                       x-model="selectedComponent.data.rotation" 
                                                       min="0" 
                                                       max="360" 
                                                       step="1" 
                                                       class="w-16 rounded-lg border border-neutral-200 bg-white px-2 py-1 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                                <flux:text class="text-xs text-neutral-600 dark:text-neutral-400">°</flux:text>
                                            </div>
                                            <div class="flex gap-2">
                                                <button @click="selectedComponent.data.rotation = 0" class="px-3 py-1 bg-neutral-200 text-neutral-700 text-xs rounded hover:bg-neutral-300 dark:bg-neutral-700 dark:text-neutral-300 dark:hover:bg-neutral-600">0°</button>
                                                <button @click="selectedComponent.data.rotation = 90" class="px-3 py-1 bg-neutral-200 text-neutral-700 text-xs rounded hover:bg-neutral-300 dark:bg-neutral-700 dark:text-neutral-300 dark:hover:bg-neutral-600">90°</button>
                                                <button @click="selectedComponent.data.rotation = 180" class="px-3 py-1 bg-neutral-200 text-neutral-700 text-xs rounded hover:bg-neutral-300 dark:bg-neutral-700 dark:text-neutral-300 dark:hover:bg-neutral-600">180°</button>
                                                <button @click="selectedComponent.data.rotation = 270" class="px-3 py-1 bg-neutral-200 text-neutral-700 text-xs rounded hover:bg-neutral-300 dark:bg-neutral-700 dark:text-neutral-300 dark:hover:bg-neutral-600">270°</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </template>

                        <template x-if="selectedComponent.type === 'navigation'">
                            <div class="space-y-4">
                                <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('Navigation Properties') }}</flux:text>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Title') }}</flux:text>
                                    <input type="text" x-model="selectedComponent.data.title" placeholder="Navigation" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Button 1 Text') }}</flux:text>
                                    <input type="text" x-model="selectedComponent.data.button1Text" placeholder="Back" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Button 1 Page') }}</flux:text>
                                    <select x-model="selectedComponent.data.button1Page" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        <option value="">Select a page...</option>
                                        <template x-for="page in pages" :key="page.id">
                                            <option :value="page.id" x-text="page.name"></option>
                                        </template>
                                    </select>
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Button 2 Text') }}</flux:text>
                                    <input type="text" x-model="selectedComponent.data.button2Text" placeholder="Next" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Button 2 Page') }}</flux:text>
                                    <select x-model="selectedComponent.data.button2Page" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        <option value="">Select a page...</option>
                                        <template x-for="page in pages" :key="page.id">
                                            <option :value="page.id" x-text="page.name"></option>
                                        </template>
                                    </select>
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Font Family') }}</flux:text>
                                    <select x-model="selectedComponent.data.fontFamily" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        <option value="font-sans">Sans Serif</option>
                                        <option value="font-serif">Serif</option>
                                        <option value="font-mono">Monospace</option>
                                        <option value="font-display">Display</option>
                                        <option value="font-handwriting">Handwriting</option>
                                    </select>
                                </div>
                            </div>
                        </template>

                        <template x-if="selectedComponent.type === 'card'">
                            <div class="space-y-4">
                                <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('Card Properties') }}</flux:text>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Title') }}</flux:text>
                                    <input type="text" x-model="selectedComponent.data.title" placeholder="Card Title" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Content') }}</flux:text>
                                    <textarea rows="3" x-model="selectedComponent.data.content" placeholder="Card content goes here" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white"></textarea>
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Button Text') }}</flux:text>
                                    <input type="text" x-model="selectedComponent.data.buttonText" placeholder="Learn More" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Target Page') }}</flux:text>
                                    <select x-model="selectedComponent.data.targetPage" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        <option value="">Select a page...</option>
                                        <template x-for="page in pages" :key="page.id">
                                            <option :value="page.id" x-text="page.name"></option>
                                        </template>
                                    </select>
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Font Family') }}</flux:text>
                                    <select x-model="selectedComponent.data.fontFamily" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        <option value="font-sans">Sans Serif</option>
                                        <option value="font-serif">Serif</option>
                                        <option value="font-mono">Monospace</option>
                                        <option value="font-display">Display</option>
                                        <option value="font-handwriting">Handwriting</option>
                                    </select>
                                </div>
                            </div>
                        </template>

                        <template x-if="selectedComponent.type === 'video-player'">
                            <div class="space-y-4">
                                <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('Video Player Properties') }}</flux:text>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Title') }}</flux:text>
                                    <input type="text" x-model="selectedComponent.data.title" placeholder="Video Player" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Description') }}</flux:text>
                                    <input type="text" x-model="selectedComponent.data.description" placeholder="Click to play video" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Video URL') }}</flux:text>
                                    <input type="url" x-model="selectedComponent.data.videoUrl" placeholder="https://example.com/video.mp4" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                </div>
                            </div>
                        </template>
                        
                        <template x-if="selectedComponent.type === 'tv-button'">
                            <div class="space-y-4">
                                <flux:text class="text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider mb-2">{{ __('TV Button Properties') }}</flux:text>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Button Text') }}</flux:text>
                                    <input type="text" x-model="selectedComponent.data.text" placeholder="Watch TV" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Target Page') }}</flux:text>
                                    <div class="p-2 bg-blue-50 border border-blue-200 rounded text-xs text-blue-800 dark:bg-blue-900/20 dark:border-blue-800 dark:text-blue-200">
                                        <strong>Auto-linked to TV Page:</strong> This button automatically navigates to the TV page for IPTV channels.
                                    </div>
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Button Style') }}</flux:text>
                                    <select x-model="selectedComponent.data.style" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        <option value="primary">Primary (Blue)</option>
                                        <option value="secondary">Secondary (Gray)</option>
                                        <option value="success">Success (Green)</option>
                                        <option value="warning">Warning (Yellow)</option>
                                        <option value="danger">Danger (Red)</option>
                                    </select>
                                </div>
                                <div>
                                    <flux:text class="text-sm font-medium mb-2 block">{{ __('Font Family') }}</flux:text>
                                    <select x-model="selectedComponent.data.fontFamily" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                        <option value="font-sans">Sans Serif</option>
                                        <option value="font-serif">Serif</option>
                                        <option value="font-mono">Monospace</option>
                                        <option value="font-display">Display</option>
                                        <option value="font-handwriting">Handwriting</option>
                                    </select>
                                </div>
                            </div>
                        </template>
                    </div>
                </div>
            </div>

        <!-- Publish Template Modal -->
        <flux:modal name="publish-template-modal" class="max-w-4xl">
            <div class="p-6">
                <div class="mb-6">
                    <flux:heading size="lg">{{ __('Publish Template') }}</flux:heading>
                    <flux:subheading>{{ __('Deploy template to selected displays') }}</flux:subheading>
                </div>

                <div class="flex justify-end space-x-3 mt-8 pt-6 border-t border-neutral-200 dark:border-neutral-700">
                    <flux:modal.close>
                        <flux:button variant="subtle">{{ __('Cancel') }}</flux:button>
                    </flux:modal.close>
                    <flux:button variant="primary" @click="saveTemplate()">
                        {{ __('Save Template') }}
                    </flux:button>
                </div>
            </div>
        </flux:modal>

        <!-- Shape Properties -->
        <template x-if="selectedComponent.type === 'shape'">
            <!-- Shape Properties Accordion -->
            <div class="space-y-3">
                <!-- Shape Type Section -->
                <div class="border border-neutral-200 rounded-lg dark:border-neutral-700">
                    <button @click="toggleAccordionSection('shapeType')" 
                            class="w-full px-4 py-3 text-left flex items-center justify-between hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-all duration-300 ease-out hover:shadow-sm rounded-t-lg">
                        <flux:text class="text-sm font-medium text-neutral-700 dark:text-neutral-300">{{ __('Shape Type') }}</flux:text>
                        <svg class="w-5 h-5 text-neutral-400 transition-all duration-500 ease-out" 
                             :class="openAccordionSection === 'shapeType' ? 'rotate-180 scale-110' : 'scale-100'"
                             fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                        </svg>
                    </button>
                    <div x-show="openAccordionSection === 'shapeType'" 
                         x-transition:enter="transition ease-out duration-500"
                         x-transition:enter-start="opacity-0 transform -translate-y-4 scale-95"
                         x-transition:enter-end="opacity-100 transform translate-y-0 scale-100"
                         x-transition:leave="transition ease-in duration-400"
                         x-transition:leave-start="opacity-100 transform translate-y-0 scale-100"
                         x-transition:leave-end="opacity-0 transform -translate-y-4 scale-95"
                         class="px-4 pb-4 overflow-hidden">
                        <div>
                            <flux:text class="text-sm font-medium mb-2 block">{{ __('Shape Type') }}</flux:text>
                            <select x-model="selectedComponent.data.shapeType" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                <option value="rectangle">Rectangle</option>
                                <option value="circle">Circle</option>
                                <option value="triangle">Triangle</option>
                                <option value="diamond">Diamond</option>
                                <option value="hexagon">Hexagon</option>
                                <option value="star">Star</option>
                            </select>
                        </div>
                    </div>
                </div>
                
                <!-- Fill & Colors Section -->
                <div class="border border-neutral-200 rounded-lg dark:border-neutral-700">
                    <button @click="toggleAccordionSection('fillColors')" 
                            class="w-full px-4 py-3 text-left flex items-center justify-between hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-all duration-300 ease-out hover:shadow-sm rounded-t-lg">
                        <flux:text class="text-sm font-medium text-neutral-700 dark:text-neutral-300">{{ __('Fill & Colors') }}</flux:text>
                        <svg class="w-5 h-5 text-neutral-400 transition-all duration-500 ease-out" 
                             :class="openAccordionSection === 'fillColors' ? 'rotate-180 scale-110' : 'scale-100'"
                             fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                        </svg>
                    </button>
                    <div x-show="openAccordionSection === 'fillColors'" 
                         x-transition:enter="transition ease-out duration-500"
                         x-transition:enter-start="opacity-0 transform -translate-y-4 scale-95"
                         x-transition:enter-end="opacity-100 transform translate-y-0 scale-100"
                         x-transition:leave="transition ease-in duration-400"
                         x-transition:leave-start="opacity-100 transform translate-y-0 scale-100"
                         x-transition:leave-end="opacity-0 transform -translate-y-4 scale-95"
                         class="px-4 pb-4 space-y-3 overflow-hidden">
                        <!-- Fill Color -->
                        <div>
                            <flux:text class="text-sm font-medium mb-2 block">{{ __('Fill Color') }}</flux:text>
                            <div class="flex gap-2">
                                <input type="color" x-model="selectedComponent.data.fillColor" class="w-12 h-10 rounded border border-neutral-200">
                                <input type="text" x-model="selectedComponent.data.fillColor" placeholder="#3b82f6" class="flex-1 rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                            </div>
                        </div>
                        
                        <!-- Quick Color Presets -->
                        <div>
                            <flux:text class="text-sm font-medium mb-2 block">{{ __('Quick Colors') }}</flux:text>
                            <div class="grid grid-cols-5 gap-2">
                                <button @click="selectedComponent.data.fillColor = '#3b82f6'" class="w-8 h-8 bg-blue-500 rounded border-2 border-white shadow-sm hover:scale-110 transition-transform"></button>
                                <button @click="selectedComponent.data.fillColor = '#10b981'" class="w-8 h-8 bg-green-500 rounded border-2 border-white shadow-sm hover:scale-110 transition-transform"></button>
                                <button @click="selectedComponent.data.fillColor = '#f59e0b'" class="w-8 h-8 bg-yellow-500 rounded border-2 border-white shadow-sm hover:scale-110 transition-transform"></button>
                                <button @click="selectedComponent.data.fillColor = '#ef4444'" class="w-8 h-8 bg-red-500 rounded border-2 border-white shadow-sm hover:scale-110 transition-transform"></button>
                                <button @click="selectedComponent.data.fillColor = '#8b5cf6'" class="w-8 h-8 bg-purple-500 rounded border-2 border-white shadow-sm hover:scale-110 transition-transform"></button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Border Settings Section -->
                <div class="border border-neutral-200 rounded-lg dark:border-neutral-700">
                    <button @click="toggleAccordionSection('border')" 
                            class="w-full px-4 py-3 text-left flex items-center justify-between hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-all duration-300 ease-out hover:shadow-sm rounded-t-lg">
                        <flux:text class="text-sm font-medium text-neutral-700 dark:text-neutral-300">{{ __('Border Settings') }}</flux:text>
                        <svg class="w-5 h-5 text-neutral-400 transition-all duration-500 ease-out" 
                             :class="openAccordionSection === 'border' ? 'rotate-180 scale-110' : 'scale-100'"
                             fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                        </svg>
                    </button>
                    <div x-show="openAccordionSection === 'border'" 
                         x-transition:enter="transition ease-out duration-500"
                         x-transition:enter-start="opacity-0 transform -translate-y-4 scale-95"
                         x-transition:enter-end="opacity-100 transform translate-y-0 scale-100"
                         x-transition:leave="transition ease-in duration-400"
                         x-transition:leave-start="opacity-100 transform translate-y-0 scale-100"
                         x-transition:leave-end="opacity-0 transform -translate-y-4 scale-95"
                         class="px-4 pb-4 space-y-3 overflow-hidden">
                        <div class="space-y-3">
                            <div>
                                <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Width') }}</flux:text>
                                <input type="number" x-model="selectedComponent.data.borderWidth" min="0" max="10" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                            </div>
                            <div>
                                <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Style') }}</flux:text>
                                <select x-model="selectedComponent.data.borderStyle" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                    <option value="solid">Solid</option>
                                    <option value="dashed">Dashed</option>
                                    <option value="dotted">Dotted</option>
                                    <option value="double">Double</option>
                                    <option value="none">None</option>
                                </select>
                            </div>
                        </div>
                        <div>
                            <flux:text class="text-xs text-neutral-600 dark:text-neutral-400 mb-1">{{ __('Color') }}</flux:text>
                            <div class="flex gap-2">
                                <input type="color" x-model="selectedComponent.data.borderColor" class="w-12 h-10 rounded border border-neutral-200">
                                <input type="text" x-model="selectedComponent.data.borderColor" placeholder="#000000" class="flex-1 rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Advanced Properties Section -->
                <div class="border border-neutral-200 rounded-lg dark:border-neutral-700">
                    <button @click="toggleAccordionSection('advanced')" 
                            class="w-full px-4 py-3 text-left flex items-center justify-between hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-all duration-300 ease-out hover:shadow-sm rounded-t-lg">
                        <flux:text class="text-sm font-medium text-neutral-700 dark:text-neutral-300">{{ __('Advanced Properties') }}</flux:text>
                        <svg class="w-5 h-5 text-neutral-400 transition-all duration-500 ease-out" 
                             :class="openAccordionSection === 'advanced' ? 'rotate-180 scale-110' : 'scale-100'"
                             fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                        </svg>
                    </button>
                    <div x-show="openAccordionSection === 'advanced'" 
                         x-transition:enter="transition ease-out duration-500"
                         x-transition:enter-start="opacity-0 transform -translate-y-4 scale-95"
                         x-transition:enter-end="opacity-100 transform translate-y-0 scale-100"
                         x-transition:leave="transition ease-in duration-400"
                         x-transition:leave-start="opacity-100 transform translate-y-0 scale-100"
                         x-transition:leave-end="opacity-0 transform -translate-y-4 scale-95"
                         class="px-4 pb-4 space-y-3 overflow-hidden">
                        <!-- Rectangle-specific properties -->
                        <div x-show="selectedComponent.data.shapeType === 'rectangle'">
                            <flux:text class="text-sm font-medium mb-2 block">{{ __('Border Radius') }}</flux:text>
                            <input type="text" x-model="selectedComponent.data.borderRadius" placeholder="0px, 5px, 10px, 50%" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                        </div>
                        
                        <!-- Polygon-specific properties -->
                        <div x-show="['triangle', 'diamond', 'hexagon', 'star'].includes(selectedComponent.data.shapeType)">
                            <flux:text class="text-sm font-medium mb-2 block">{{ __('Custom Points') }}</flux:text>
                            <textarea x-model="selectedComponent.data.points" 
                                      rows="2"
                                      placeholder="Custom polygon points (e.g., 50,10 90,90 10,90 for triangle)"
                                      class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white font-mono text-xs"></textarea>
                            <flux:text class="text-xs text-neutral-500 dark:text-neutral-400">Format: x1,y1 x2,y2 x3,y3... (leave empty for default)</flux:text>
                        </div>
                    </div>
                </div>
                
                <!-- Rotation Section -->
                <div class="border border-neutral-200 rounded-lg dark:border-neutral-700">
                    <button @click="toggleAccordionSection('rotation')" 
                            class="w-full px-4 py-3 text-left flex items-center justify-between hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-all duration-300 ease-out hover:shadow-sm rounded-t-lg">
                        <flux:text class="text-sm font-medium text-neutral-700 dark:text-neutral-300">{{ __('Rotation') }}</flux:text>
                        <svg class="w-5 h-5 text-neutral-400 transition-all duration-500 ease-out" 
                             :class="openAccordionSection === 'rotation' ? 'rotate-180 scale-110' : 'scale-100'"
                             fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                        </svg>
                    </button>
                    <div x-show="openAccordionSection === 'rotation'" 
                         x-transition:enter="transition ease-out duration-500"
                         x-transition:enter-start="opacity-0 transform -translate-y-4 scale-95"
                         x-transition:enter-end="opacity-100 transform translate-y-0 scale-100"
                         x-transition:leave="transition ease-in duration-400"
                         x-transition:leave-start="opacity-100 transform translate-y-0 scale-100"
                         x-transition:leave-end="opacity-0 transform -translate-y-4 scale-95"
                         class="px-4 pb-4 overflow-hidden">
                        <div class="space-y-2">
                            <div class="flex items-center gap-2">
                                <input type="range" 
                                       x-model="selectedComponent.data.rotation" 
                                       min="0" 
                                       max="360" 
                                       step="1" 
                                       class="flex-1 h-2 bg-neutral-200 rounded-lg appearance-none cursor-pointer dark:bg-neutral-700">
                                <input type="number" 
                                       x-model="selectedComponent.data.rotation" 
                                       min="0" 
                                       max="360" 
                                       step="1" 
                                       class="w-16 rounded-lg border border-neutral-200 bg-white px-2 py-1 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                                <flux:text class="text-xs text-neutral-600 dark:text-neutral-400">°</flux:text>
                            </div>
                            <div class="flex gap-2">
                                <button @click="selectedComponent.data.rotation = 0" class="px-3 py-1 bg-neutral-200 text-neutral-700 text-xs rounded hover:bg-neutral-300 dark:bg-neutral-700 dark:text-neutral-300 dark:hover:bg-neutral-600">0°</button>
                                <button @click="selectedComponent.data.rotation = 90" class="px-3 py-1 bg-neutral-200 text-neutral-700 text-xs rounded hover:bg-neutral-300 dark:bg-neutral-700 dark:text-neutral-300 dark:hover:bg-neutral-600">90°</button>
                                <button @click="selectedComponent.data.rotation = 180" class="px-3 py-1 bg-neutral-200 text-neutral-700 text-xs rounded hover:bg-neutral-300 dark:bg-neutral-700 dark:text-neutral-300 dark:hover:bg-neutral-600">180°</button>
                                <button @click="selectedComponent.data.rotation = 270" class="px-3 py-1 bg-neutral-200 text-neutral-700 text-xs rounded hover:bg-neutral-300 dark:bg-neutral-700 dark:text-neutral-300 dark:hover:bg-neutral-600">270°</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </template>
                        </div> <!-- End Component Properties Container -->

        <!-- Create Page Modal -->
        <flux:modal name="create-page-modal" class="max-w-2xl">
            <div class="p-6">
                <div class="mb-6">
                    <flux:heading size="lg">{{ __('Create New Page') }}</flux:heading>
                    <flux:subheading>{{ __('Add a new page to your template') }}</flux:subheading>
                </div>

                <form @submit.prevent="createPage()" class="space-y-4">
                    <div>
                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Page Name') }}</flux:text>
                        <input type="text" x-model="newPage.name" required placeholder="Enter page name" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                    </div>
                    
                    <div>
                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Description') }}</flux:text>
                        <textarea x-model="newPage.description" rows="3" placeholder="Describe what this page contains" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white"></textarea>
                    </div>
                    
                    <div>
                        <flux:text class="text-sm font-medium mb-2 block">{{ __('Page Type') }}</flux:text>
                        <select x-model="newPage.type" class="w-full rounded-lg border border-neutral-200 bg-white px-3 py-2 text-sm dark:border-neutral-700 dark:bg-neutral-900 dark:text-white">
                            <option value="content">Content Page</option>
                            <option value="menu">Menu Page</option>
                            <option value="tv">TV Page (IPTV)</option>
                            <option value="form">Form Page</option>
                            <option value="gallery">Gallery Page</option>
                        </select>
                    </div>

                    <div class="flex justify-end space-x-3 pt-6 border-t border-neutral-200 dark:border-neutral-700">
                        <flux:modal.close>
                            <flux:button variant="subtle">{{ __('Cancel') }}</flux:button>
                        </flux:modal.close>
                        <flux:button type="submit" variant="primary">
                            {{ __('Create Page') }}
                        </flux:button>
                    </div>
                </form>
            </div>
        </flux:modal>
    </div>

    <script>
        function templateEditor() {
            return {
                selectedTemplate: 'welcome',
                selectedComponent: null,
                selectedPage: null,
                previewMode: 'desktop',
                isPreviewMode: false,
                canvasResolution: 'HD (1920x1080)',
                canvasWidth: 1920,
                canvasHeight: 1080,
                customWidth: '',
                customHeight: '',
                
                // Resolution presets for hotel TV interfaces
                resolutionPresets: [
                    { name: 'HD (1920x1080)', width: 1920, height: 1080, type: 'hd' },
                    { name: '4K UHD (3840x2160)', width: 3840, height: 2160, type: '4k' },
                    { name: 'HD Ready (1280x720)', width: 1280, height: 720, type: 'hdready' },
                    { name: 'Ultra HD (2560x1440)', width: 2560, height: 1440, type: 'ultrahd' },
                    { name: '8K UHD (7680x4320)', width: 7680, height: 4320, type: '8k' }
                ],
                
                // Icon library for buttons and components
                iconLibrary: [
                    { name: 'none', icon: '', label: 'No Icon' },
                    { name: 'arrow-right', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"/></svg>', label: 'Arrow Right' },
                    { name: 'arrow-left', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 17l-5-5m0 0l5-5m-5 5h12"/></svg>', label: 'Arrow Left' },
                    { name: 'plus', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/></svg>', label: 'Plus' },
                    { name: 'minus', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"/></svg>', label: 'Minus' },
                    { name: 'check', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/></svg>', label: 'Check' },
                    { name: 'x', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/></svg>', label: 'X' },
                    { name: 'home', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"/></svg>', label: 'Home' },
                    { name: 'user', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/></svg>', label: 'User' },
                    { name: 'settings', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.94 1.543 2.572 1.065 2.572-1.065z"/><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/></svg>', label: 'Settings' },
                    { name: 'info', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>', label: 'Info' },
                    { name: 'question', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>', label: 'Question' },
                    { name: 'star', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.959.59h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.118 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.959-.59l1.519-4.674z"/></svg>', label: 'Star' },
                    { name: 'heart', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 000-6.364A4.5 4.5 0 0012 2a4.5 4.5 0 00-7.682 4.318z"/></svg>', label: 'Heart' },
                    { name: 'mail', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/></svg>', label: 'Mail' },
                    { name: 'phone', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/></svg>', label: 'Phone' },
                    { name: 'calendar', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>', label: 'Calendar' },
                    { name: 'clock', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>', label: 'Clock' },
                    { name: 'location', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/></svg>', label: 'Location' },
                    { name: 'search', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/></svg>', label: 'Search' },
                    { name: 'menu', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/></svg>', label: 'Menu' },
                    { name: 'tv', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/></svg>', label: 'TV' },
                    { name: 'wifi', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.111 16.404a5.5 5.5 0 017.778 0M12 20h.01m-7.08-7.071c3.904-3.905 10.236-3.905 14.141 0M1.394 9.393c5.857-5.857 15.355-5.857 21.213 0"/></svg>', label: 'WiFi' },
                    { name: 'battery', icon: '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>', label: 'Battery' }
                ],
                
                changeCanvasResolution(preset) {
                    this.canvasResolution = preset.name;
                    this.canvasWidth = preset.width;
                    this.canvasHeight = preset.height;
                    
                    // Update preview mode based on resolution
                    if (preset.width >= 3840) {
                        this.previewMode = '4k';
                    } else if (preset.width >= 1920) {
                        this.previewMode = 'hd';
                    } else {
                        this.previewMode = 'standard';
                    }
                },
                
                setCustomResolution() {
                    const width = parseInt(this.customWidth);
                    const height = parseInt(this.customHeight);
                    
                    if (width && height && width > 0 && height > 0) {
                        this.canvasWidth = width;
                        this.canvasHeight = height;
                        this.canvasResolution = `Custom (${width}×${height})`;
                        this.previewMode = 'custom';
                    }
                },
                
                // Calculate device frame dimensions while maintaining aspect ratio
                getDeviceFrameDimensions() {
                    const maxWidth = 800;
                    const maxHeight = 600;
                    const aspectRatio = this.canvasWidth / this.canvasHeight;
                    
                    let frameWidth, frameHeight;
                    
                    if (aspectRatio > 1) {
                        // Landscape orientation
                        frameWidth = Math.min(this.canvasWidth / 3, maxWidth);
                        frameHeight = frameWidth / aspectRatio;
                    } else {
                        // Portrait orientation
                        frameHeight = Math.min(this.canvasHeight / 3, maxHeight);
                        frameWidth = frameHeight * aspectRatio;
                    }
                    
                    return {
                        width: Math.round(frameWidth),
                        height: Math.round(frameHeight)
                    };
                },
                
                // Calculate scale factor between canvas and device frame
                getScaleFactor() {
                    const frameDims = this.getDeviceFrameDimensions();
                    return frameDims.width / this.canvasWidth;
                },
                
                // Calculate adaptive ruler spacing based on canvas resolution
                // This prevents ruler numbers from overlapping on high-resolution canvases
                // - 4K+ (3840x2160+): 200px spacing for clear readability
                // - HD (1920x1080): 100px spacing for balanced density
                // - HD Ready (1280x720): 50px spacing for standard use
                // - Standard: 25px spacing for compact layouts
                getRulerSpacing() {
                    // For high-resolution canvases, use larger spacing to prevent overlapping
                    if (this.canvasWidth >= 3840 || this.canvasHeight >= 2160) {
                        // 4K and above: use 200px spacing
                        return 200;
                    } else if (this.canvasWidth >= 1920 || this.canvasHeight >= 1080) {
                        // HD: use 100px spacing
                        return 100;
                    } else if (this.canvasWidth >= 1280 || this.canvasHeight >= 720) {
                        // HD Ready: use 50px spacing
                        return 50;
                    } else {
                        // Standard: use 25px spacing
                        return 25;
                    }
                },
                
                // Calculate optimal text size for ruler numbers based on spacing
                // Ensures text is appropriately sized for the current ruler spacing
                getRulerTextSize() {
                    const spacing = this.getRulerSpacing();
                    if (spacing >= 200) {
                        return 'text-sm'; // Larger text for 4K+
                    } else if (spacing >= 100) {
                        return 'text-xs'; // Medium text for HD
                    } else {
                        return 'text-xs'; // Small text for lower resolutions
                    }
                },
                
                // Calculate optimal width for ruler number containers
                // Prevents text overlap by providing adequate spacing between numbers
                getRulerNumberWidth() {
                    const spacing = this.getRulerSpacing();
                    if (spacing >= 200) {
                        return 40; // Wider container for 4K+ to accommodate larger numbers
                    } else if (spacing >= 100) {
                        return 30; // Medium width for HD
                    } else {
                        return 25; // Narrow width for lower resolutions
                    }
                },
                
                // Calculate optimal mark heights for ruler
                // Provides visual hierarchy with appropriately sized marks for each resolution
                getRulerMarkHeights() {
                    const spacing = this.getRulerSpacing();
                    if (spacing >= 200) {
                        return { major: 6, minor: 4 }; // Taller marks for 4K+
                    } else if (spacing >= 100) {
                        return { major: 5, minor: 3 }; // Medium marks for HD
                    } else {
                        return { major: 4, minor: 2 }; // Standard marks for lower resolutions
                    }
                },
                
                // Scale component coordinates from canvas space to device frame space
                scaleComponentToFrame(component) {
                    const scaleFactor = this.getScaleFactor();
                    return {
                        x: component.x * scaleFactor,
                        y: component.y * scaleFactor,
                        width: component.width * scaleFactor,
                        height: component.height * scaleFactor
                    };
                },
                
                // Scale coordinates from device frame space back to canvas space
                scaleFrameToCanvas(x, y) {
                    const scaleFactor = this.getScaleFactor();
                    return {
                        x: x / scaleFactor,
                        y: y / scaleFactor
                    };
                },
                
                // Show scaling information
                showScalingInfo() {
                    // Function placeholder for future scaling info display
                },
                
                // Show keyboard shortcuts help
                showKeyboardShortcuts() {
                    // Function placeholder for future keyboard shortcuts display
                },
                
                // Show guide information
                showGuideInfo() {
                    // Function placeholder for future guide info display
                },
                
                // Convert screen coordinates to canvas coordinates
                screenToCanvas(screenX, screenY) {
                    const canvasContainer = this.$refs.canvasContainer;
                    if (!canvasContainer) return { x: screenX, y: screenY };
                    
                    const canvasRect = canvasContainer.getBoundingClientRect();
                    
                    // Convert to canvas coordinates
                    let canvasX = (screenX - canvasRect.left - this.canvasOffset.x) / this.canvasZoom;
                    let canvasY = (screenY - canvasRect.top - this.canvasOffset.y) / this.canvasZoom;
                    
                    // Adjust for ruler offset
                    const rulerSize = this.showGuides ? 24 : 0;
                    canvasX -= rulerSize;
                    canvasY -= rulerSize;
                    
                    // Convert from device frame coordinates to canvas coordinates
                    const scaleFactor = this.getScaleFactor();
                    canvasX = canvasX / scaleFactor;
                    canvasY = canvasY / scaleFactor;
                    
                    return { x: canvasX, y: canvasY };
                },
                
                // Grid System Functions
                toggleGrid() {
                    this.showGrid = !this.showGrid;
                },
                
                toggleSnapToGrid() {
                    this.snapToGrid = !this.snapToGrid;
                },
                
                changeGridSize(size) {
                    this.gridSize = size;
                },
                
                // Guide System Functions (Scena-style)
                toggleGuides() {
                    this.showGuides = !this.showGuides;
                },
                
                changeGuideSize(size) {
                    this.guideSize = size;
                },
                
                // Add a new horizontal guide
                addHorizontalGuide(y) {
                    const guide = {
                        id: Date.now() + Math.random(),
                        position: y,
                        type: 'horizontal'
                    };
                    this.guides.horizontal.push(guide);
                },
                
                // Add a new vertical guide
                addVerticalGuide(x) {
                    const guide = {
                        id: Date.now() + Math.random(),
                        position: x,
                        type: 'vertical'
                    };
                    this.guides.vertical.push(guide);
                },
                
                // Remove a guide
                removeGuide(guideId) {
                    this.guides.horizontal = this.guides.horizontal.filter(g => g.id !== guideId);
                    this.guides.vertical = this.guides.vertical.filter(g => g.id !== guideId);
                },
                
                // Snap component to guides
                snapToGuides(x, y, width, height) {
                    if (!this.showGuides) return { x, y };
                    
                    let snappedX = x;
                    let snappedY = y;
                    
                    // Snap to vertical guides
                    this.guides.vertical.forEach(guide => {
                        const guidePos = guide.position * this.getScaleFactor();
                        // Snap left edge
                        if (Math.abs(x - guidePos) <= this.guideSnapDistance) {
                            snappedX = guidePos;
                        }
                        // Snap right edge
                        if (Math.abs((x + width) - guidePos) <= this.guideSnapDistance) {
                            snappedX = guidePos - width;
                        }
                        // Snap center
                        if (Math.abs((x + width/2) - guidePos) <= this.guideSnapDistance) {
                            snappedX = guidePos - width/2;
                        }
                    });
                    
                    // Snap to horizontal guides
                    this.guides.horizontal.forEach(guide => {
                        const guidePos = guide.position * this.getScaleFactor();
                        // Snap top edge
                        if (Math.abs(y - guidePos) <= this.guideSnapDistance) {
                            snappedY = guidePos;
                        }
                        // Snap bottom edge
                        if (Math.abs((y + height) - guidePos) <= this.guideSnapDistance) {
                            snappedY = guidePos - height;
                        }
                        // Snap center
                        if (Math.abs((y + height/2) - guidePos) <= this.guideSnapDistance) {
                            snappedY = guidePos - height/2;
                        }
                    });
                    
                    return { x: snappedX, y: snappedY };
                },
                
                // Guide dragging functionality
                startDragGuide(guide, event) {
                    event.preventDefault();
                    event.stopPropagation();
                    
                    const startY = event.clientY;
                    const startX = event.clientX;
                    const startPosition = guide.position;
                    
                    const moveHandler = (e) => {
                        e.preventDefault();
                        
                        if (guide.type === 'horizontal') {
                            const deltaY = (e.clientY - startY) / this.canvasZoom;
                            guide.position = Math.max(0, startPosition + deltaY);
                        } else {
                            const deltaX = (e.clientX - startX) / this.canvasZoom;
                            guide.position = Math.max(0, startPosition + deltaX);
                        }
                    };
                    
                    const upHandler = () => {
                        document.removeEventListener('mousemove', moveHandler);
                        document.removeEventListener('mouseup', upHandler);
                    };
                    
                    document.addEventListener('mousemove', moveHandler);
                    document.addEventListener('mouseup', upHandler);
                },
                
                // Track mouse position for measurements
                trackMouse(event) {
                    this.mouseX = event.clientX;
                    this.mouseY = event.clientY;
                    
                    // Convert to canvas coordinates
                    const canvasCoords = this.screenToCanvas(event.clientX, event.clientY);
                    this.mouseCanvasX = canvasCoords.x;
                    this.mouseCanvasY = canvasCoords.y;
                },
                
                // Snap position to grid
                snapToGridPosition(x, y) {
                    if (!this.snapToGrid) return { x, y };
                    
                    const snappedX = Math.round(x / this.gridSize) * this.gridSize;
                    const snappedY = Math.round(y / this.gridSize) * this.gridSize;
                    
                    return { x: snappedX, y: snappedY };
                },
                
                togglePreviewMode() {
                    this.isPreviewMode = !this.isPreviewMode;
                    if (this.isPreviewMode) {
                        // Hide properties panel and component library when in preview mode
                        this.showPropertiesPanel = false;
                        this.showComponentLibrary = false;
                        // Deselect any selected component
                        this.selectedComponent = null;
                    }
                },
                
                init() {
                    // Create default pages
                    this.createDefaultPages();
                    
                    // Add some sample components to the first page
                    this.addComponent('header', 50, 50, 300, 100);
                    this.addComponent('weather', 400, 50, 200, 150);
                    this.addComponent('text-block', 50, 200, 250, 100);
                    
                    // Select the first page by default
                    if (this.pages.length > 0) {
                        this.selectPage(this.pages[0]);
                    }
                    
                    // Add some default guides for measurement reference
                    this.addHorizontalGuide(100);
                    this.addHorizontalGuide(200);
                    this.addVerticalGuide(100);
                    this.addVerticalGuide(200);
                    
                    // Add keyboard shortcuts
                    document.addEventListener('keydown', (e) => {
                        // Single key shortcuts (when not typing in inputs)
                        if (!e.target.matches('input, textarea, select')) {
                            switch(e.key.toLowerCase()) {
                                case '0':
                                    e.preventDefault();
                                    this.resetCanvas();
                                    break;
                                case '1':
                                    e.preventDefault();
                                    this.fitToPage();
                                    break;
                                case '2':
                                    e.preventDefault();
                                    this.fitToScreen();
                                    break;
                                case 'r':
                                    e.preventDefault();
                                    this.toggleGuides();
                                    break;
                                case 'g':
                                    e.preventDefault();
                                    this.toggleGrid();
                                    break;
                            }
                        }
                    });
                },
                
                // Page Management
                createDefaultPages() {
                    this.pages = [
                        {
                            id: this.nextPageId++,
                            name: 'Welcome',
                            description: 'Welcome page for hotel guests',
                            type: 'content',
                            components: [],
                            background: {
                                type: 'gradient',
                                gradientStart: '#667eea',
                                gradientEnd: '#764ba2',
                                imageUrl: '',
                                gifUrl: '',
                                videoUrl: '',
                                overlayColor: '#000000',
                                overlayOpacity: 0
                            }
                        },
                        {
                            id: this.nextPageId++,
                            name: 'TV Channels',
                            description: 'IPTV channel selection and playback',
                            type: 'tv',
                            components: [],
                            background: {
                                type: 'color',
                                color: '#1f2937',
                                gradientStart: '',
                                gradientEnd: '',
                                imageUrl: '',
                                gifUrl: '',
                                videoUrl: '',
                                overlayColor: '#000000',
                                overlayOpacity: 20
                            }
                        }
                    ];
                },
                
                ensureTVPageExists() {
                    // Check if TV page already exists
                    const tvPage = this.pages.find(p => p.type === 'tv');
                    if (!tvPage) {
                        // Create TV page if it doesn't exist
                        const newTVPage = {
                            id: this.nextPageId++,
                            name: 'TV Channels',
                            description: 'IPTV channel selection and playback',
                            type: 'tv',
                            components: [],
                            background: {
                                type: 'color',
                                color: '#1f2937',
                                gradientStart: '',
                                gradientEnd: '',
                                imageUrl: '',
                                gifUrl: '',
                                videoUrl: '',
                                overlayColor: '#000000',
                                overlayOpacity: 20
                            }
                        };
                        this.pages.push(newTVPage);

                    }
                },
                
                navigateToTVPage() {
                    // Ensure TV page exists
                    this.ensureTVPageExists();
                    
                    // Find and select the TV page
                    const tvPage = this.pages.find(p => p.type === 'tv');
                    if (tvPage) {
                        this.selectPage(tvPage);
                    }
                },
                
                applyButtonPreset(preset) {
                    if (!this.selectedComponent || this.selectedComponent.type !== 'button') return;
                    
                    const presets = {
                        primary: {
                            backgroundColor: '#3b82f6',
                            textColor: '#ffffff',
                            borderWidth: 0,
                            borderStyle: 'none',
                            borderColor: '#000000',
                            fontSize: 'text-base',
                            fontWeight: 'font-medium',
                            paddingX: 6,
                            paddingY: 3,
                            borderRadius: 'rounded-lg',
                            hoverEffect: true,
                            hoverBackgroundColor: '#2563eb',
                            hoverTextColor: '#ffffff'
                        },
                        secondary: {
                            backgroundColor: '#6b7280',
                            textColor: '#ffffff',
                            borderWidth: 0,
                            borderStyle: 'none',
                            borderColor: '#000000',
                            fontSize: 'text-base',
                            fontWeight: 'font-medium',
                            paddingX: 6,
                            paddingY: 3,
                            borderRadius: 'rounded-lg',
                            hoverEffect: true,
                            hoverBackgroundColor: '#4b5563',
                            hoverTextColor: '#ffffff'
                        },
                        success: {
                            backgroundColor: '#10b981',
                            textColor: '#ffffff',
                            borderWidth: 0,
                            borderStyle: 'none',
                            borderColor: '#000000',
                            fontSize: 'text-base',
                            fontWeight: 'font-medium',
                            paddingX: 6,
                            paddingY: 3,
                            borderRadius: 'rounded-lg',
                            hoverEffect: true,
                            hoverBackgroundColor: '#059669',
                            hoverTextColor: '#ffffff'
                        },
                        danger: {
                            backgroundColor: '#ef4444',
                            textColor: '#ffffff',
                            borderWidth: 0,
                            borderStyle: 'none',
                            borderColor: '#000000',
                            fontSize: 'text-base',
                            fontWeight: 'font-medium',
                            paddingX: 6,
                            paddingY: 3,
                            borderRadius: 'rounded-lg',
                            hoverEffect: true,
                            hoverBackgroundColor: '#dc2626',
                            hoverTextColor: '#ffffff'
                        }
                    };
                    
                    if (presets[preset]) {
                        Object.assign(this.selectedComponent.data, presets[preset]);
                    }
                },
                
                createPage() {
                    if (!this.newPage.name.trim()) return;
                    
                    const page = {
                        id: this.nextPageId++,
                        name: this.newPage.name,
                        description: this.newPage.description,
                        type: this.newPage.type,
                        components: [],
                        background: { // Initialize background for new pages
                            type: 'color',
                            color: '#ffffff',
                            imageUrl: '',
                            gifUrl: '',
                            gifLoop: true,
                            gradientStart: '#000000',
                            gradientEnd: '#ffffff',
                            gradientDirection: 'to bottom',
                            videoUrl: '',
                            videoVolume: 0,
                            videoLoop: true,
                            overlayColor: '#000000',
                            overlayOpacity: 0
                        }
                    };
                    
                    this.pages.push(page);
                    this.selectPage(page);
                    
                    // Reset form
                    this.newPage = { name: '', description: '', type: 'content' };
                    
                    // Close modal
                    this.$dispatch('close-modal', { name: 'create-page-modal' });
                    

                },
                
                selectPage(page) {
                    this.selectedPage = page;
                    this.selectedComponent = null; // Clear any selected component
                    this.components = page.components || [];
                    this.showPropertiesPanel = true; // Show properties panel
                },
                
                duplicatePage(page) {
                    const newPage = {
                        ...page,
                        id: this.nextPageId++,
                        name: page.name + ' (Copy)',
                        components: page.components ? [...page.components] : [],
                        background: page.background // Copy background settings
                    };
                    
                    this.pages.push(newPage);
                    this.selectPage(newPage);
                },
                
                deletePage(page) {
                    if (this.pages.length <= 1) {
                        alert('You must have at least one page');
                        return;
                    }
                    
                    const index = this.pages.findIndex(p => p.id === page.id);
                    if (index > -1) {
                        this.pages.splice(index, 1);
                        
                        if (this.selectedPage?.id === page.id) {
                            this.selectPage(this.pages[0]);
                        }
                    }
                },
                
                // Navigation
                navigateToPage(pageId) {
                    if (!pageId) return;
                    
                    const targetPage = this.pages.find(p => p.id === pageId);
                    if (targetPage) {
                        this.selectPage(targetPage);
                    }
                },
                
                // Component Management
                addComponent(type, x, y, width, height) {
                    // Snap to grid if enabled
                    let finalX = x;
                    let finalY = y;
                    
                    if (this.snapToGrid) {
                        const snapped = this.snapToGridPosition(x, y);
                        finalX = snapped.x;
                        finalY = snapped.y;
                    }
                    
                    const component = {
                        id: this.nextId++,
                        type: type,
                        x: finalX,
                        y: finalY,
                        width: width,
                        height: height,
                        data: this.getDefaultData(type)
                    };
                    
                    this.components.push(component);
                    
                    // Update the current page's components
                    if (this.selectedPage) {
                        this.selectedPage.components = [...this.components];
                    }
                    
                    return component;
                },
                
                getDefaultData(type) {
                    const defaults = {
                        header: { 
                            title: 'Welcome', 
                            subtitle: 'Subtitle',
                            fontFamily: 'font-sans',
                            fontSize: 32,
                            rotation: 0
                        },
                        'text-block': { 
                            text: 'Text content',
                            fontFamily: 'font-sans',
                            fontSize: 16,
                            rotation: 0
                        },
                        weather: { 
                            temperature: '72°F', 
                            condition: 'Sunny',
                            fontFamily: 'font-sans',
                            fontSize: 48,
                            rotation: 0
                        },
                        clock: { 
                            time: '12:00', 
                            date: 'Today',
                            fontFamily: 'font-sans',
                            fontSize: 48,
                            rotation: 0,
                            style: 'digital-modern',
                            showSeconds: true,
                            showDate: true,
                            showDay: true,
                            timeFormat: '12h',
                            backgroundColor: 'transparent',
                            textColor: '#1f2937',
                            borderColor: '#d1d5db',
                            borderWidth: 0,
                            borderRadius: '0px',
                            padding: 16,
                            shadow: false
                        },
                        events: { 
                            title: 'Events', 
                            event1: 'Event 1', 
                            event2: 'Event 2',
                            fontFamily: 'font-sans',
                            fontSize: 16,
                            rotation: 0
                        },
                        menu: { 
                            title: 'Menu', 
                            item1: 'Item 1', 
                            item2: 'Item 2',
                            fontFamily: 'font-sans',
                            fontSize: 16,
                            rotation: 0
                        },
                        button: { 
                            text: 'Click Me', 
                            targetPage: '', 
                            style: 'primary',
                            backgroundColor: '#3b82f6',
                            textColor: '#ffffff',
                            borderWidth: 0,
                            borderStyle: 'none',
                            borderColor: '#000000',
                            fontSize: 'text-base',
                            fontWeight: 'font-medium',
                            fontFamily: 'font-sans',
                            paddingX: 6,
                            paddingY: 3,
                            borderRadius: 'rounded-lg',
                            hoverEffect: true,
                            hoverBackgroundColor: '#2563eb',
                            hoverTextColor: '#ffffff',
                            icon: 'none',
                            iconPosition: 'left',
                            iconSize: 'text-base',
                            customIcon: '',
                            iconColor: '#ffffff',
                            rotation: 0
                        },
                        navigation: { 
                            title: 'Navigation', 
                            button1Text: 'Back', 
                            button1Page: '', 
                            button2Text: 'Next', 
                            button2Page: '',
                            fontFamily: 'font-sans',
                            fontSize: 16,
                            rotation: 0
                        },
                        card: { 
                            title: 'Card Title', 
                            content: 'Card content goes here', 
                            buttonText: 'Learn More', 
                            targetPage: '',
                            fontFamily: 'font-sans',
                            fontSize: 16,
                            rotation: 0
                        },
                        'video-player': { 
                            title: 'Video Player', 
                            description: 'Click to play video', 
                            videoUrl: '',
                            fontFamily: 'font-sans',
                            fontSize: 16,
                            rotation: 0
                        },
                        'tv-button': { 
                            text: 'Watch TV', 
                            targetPage: 'tv', 
                            icon: 'tv', 
                            style: 'primary',
                            fontFamily: 'font-sans',
                            fontSize: 16,
                            rotation: 0
                        },
                        
                        // Shape Component
                        shape: {
                            shapeType: 'rectangle',
                            fillColor: '#3b82f6',
                            borderWidth: 0,
                            borderStyle: 'solid',
                            borderColor: '#000000',
                            borderRadius: '0px',
                            points: '50,10 90,90 10,90', // Default triangle points
                            rotation: 0
                        }
                    };
                    return defaults[type] || {};
                },
                
                // Helper function to get icon HTML
                getIconHtml(component) {
                    if (component.data.customIcon) {
                        return component.data.customIcon;
                    }
                    if (component.data.icon && component.data.icon !== 'none') {
                        const iconData = this.iconLibrary.find(i => i.name === component.data.icon);
                        return iconData ? iconData.icon : '';
                    }
                    return '';
                },
                
                // Drag and Drop
                dragStart(event, type) {
                    event.dataTransfer.setData('text/plain', type);
                    event.dataTransfer.effectAllowed = 'copy';
                },
                
                dropComponent(event) {
                    this.dragOver = false;
                    const type = event.dataTransfer.getData('text/plain');
                    
                    // Get the canvas container
                    const canvasContainer = this.$refs.canvasContainer;
                    if (!canvasContainer) return;
                    
                    const canvasRect = canvasContainer.getBoundingClientRect();
                    
                    // Calculate position relative to the canvas container
                    let canvasX = event.clientX - canvasRect.left - this.canvasOffset.x;
                    let canvasY = event.clientY - canvasRect.top - this.canvasOffset.y;
                    
                    // Adjust for ruler offset if guides are shown
                    const rulerSize = this.showGuides ? 24 : 0;
                    canvasX -= rulerSize;
                    canvasY -= rulerSize;
                    
                    // Convert from screen coordinates to canvas coordinates
                    canvasX = canvasX / this.canvasZoom;
                    canvasY = canvasY / this.canvasZoom;
                    
                    // Account for device frame positioning and padding
                    const deviceFrameOffset = this.showGuides ? 24 : 0;
                    const deviceFramePadding = 16; // p-4 = 16px
                    
                    // Convert from device frame coordinates to canvas coordinates
                    const scaleFactor = this.getScaleFactor();
                    const finalX = (canvasX - deviceFrameOffset - deviceFramePadding) / scaleFactor;
                    const finalY = (canvasY - deviceFrameOffset - deviceFramePadding) / scaleFactor;
                    
                    // Add the component at the calculated position
                    this.addComponent(type, finalX, finalY, 200, 100);
                },
                
                // Component Selection
                selectComponent(component) {
                    this.selectedComponent = component;
                    this.showPropertiesPanel = true;
                    this.openAccordionSection = 'position'; // Auto-open position section
                },
                
                // Component Dragging
                startDrag(event, component) {
                    if (event.target.closest('button')) return; // Don't drag if clicking buttons
                    
                    // Prevent canvas panning when dragging components
                    event.stopPropagation();
                    event.preventDefault();
                    
                    this.isComponentDragging = true;
                    
                    // Convert screen coordinates to canvas coordinates
                    const mousePos = this.screenToCanvas(event.clientX, event.clientY);
                    
                    // Store the offset from component position to mouse position
                    this.dragStartX = mousePos.x - component.x;
                    this.dragStartY = mousePos.y - component.y;
                    
                    const moveHandler = (e) => {
                        if (this.isComponentDragging) {
                            e.preventDefault();
                            
                            // Convert new mouse position to canvas coordinates
                            const newMousePos = this.screenToCanvas(e.clientX, e.clientY);
                            
                            // Calculate new position
                            let newX = newMousePos.x - this.dragStartX;
                            let newY = newMousePos.y - this.dragStartY;
                            
                            // Snap to grid if enabled
                            if (this.snapToGrid) {
                                const snapped = this.snapToGridPosition(newX, newY);
                                newX = snapped.x;
                                newY = snapped.y;
                            }
                            
                            // Update component position
                            component.x = newX;
                            component.y = newY;
                        }
                    };
                    
                    const upHandler = () => {
                        this.isComponentDragging = false;
                        document.removeEventListener('mousemove', moveHandler);
                        document.removeEventListener('mouseup', upHandler);
                    };
                    
                    document.addEventListener('mousemove', moveHandler);
                    document.addEventListener('mouseup', upHandler);
                },
                
                // Component Actions
                duplicateComponent(component) {
                    const newComponent = {
                        ...component,
                        id: this.nextId++,
                        x: component.x + 20,
                        y: component.y + 20
                    };
                    this.components.push(newComponent);
                    this.selectComponent(newComponent);
                },
                
                deleteComponent(component) {
                    const index = this.components.findIndex(c => c.id === component.id);
                    if (index > -1) {
                        this.components.splice(index, 1);
                        if (this.selectedComponent?.id === component.id) {
                            this.selectedComponent = null;
                            this.showPropertiesPanel = false;
                        }
                    }
                },
                
                // Save Template
                saveTemplate() {
                    const templateData = {
                        name: 'Hotel TV Template',
                        pages: this.pages,
                        previewMode: this.previewMode
                    };
                    
                    // Here you would send the data to your backend
                    alert('Template saved successfully!');
                },

                // Page Navigation
                previousPage() {
                    const currentIndex = this.pages.findIndex(p => p.id === this.selectedPage?.id);
                    if (currentIndex > 0) {
                        this.selectPage(this.pages[currentIndex - 1]);
                    }
                },
                nextPage() {
                    const currentIndex = this.pages.findIndex(p => p.id === this.selectedPage?.id);
                    if (currentIndex < this.pages.length - 1) {
                        this.selectPage(this.pages[currentIndex + 1]);
                    }
                },
                canGoToPreviousPage() {
                    return this.pages.findIndex(p => p.id === this.selectedPage?.id) > 0;
                },
                canGoToNextPage() {
                    return this.pages.findIndex(p => p.id === this.selectedPage?.id) < this.pages.length - 1;
                },
                getCurrentPageIndex() {
                    return this.pages.findIndex(p => p.id === this.selectedPage?.id) + 1;
                },

                // Background Image/GIF Library
                openImageLibrary() {
                    // This function would typically open a modal or a dedicated image picker
                    // For now, we'll just simulate a file input change
                    const input = document.createElement('input');
                    input.type = 'file';
                    input.accept = 'image/*';
                    input.onchange = (event) => {
                        const file = event.target.files[0];
                        if (file) {
                            const reader = new FileReader();
                            reader.onload = (e) => {
                                this.selectedPage.background.imageUrl = e.target.result;
                            };
                            reader.readAsDataURL(file);
                        }
                    };
                    input.click();
                },

                openGifLibrary() {
                    // This function would typically open a modal or a dedicated GIF picker
                    // For now, we'll just simulate a file input change
                    const input = document.createElement('input');
                    input.type = 'file';
                    input.accept = 'image/gif';
                    input.onchange = (event) => {
                        const file = event.target.files[0];
                        if (file) {
                            const reader = new FileReader();
                            reader.onload = (e) => {
                                this.selectedPage.background.gifUrl = e.target.result;
                            };
                            reader.readAsDataURL(file);
                        }
                    };
                    input.click();
                },

                handleImageUpload(event, type) {
                    const file = event.target.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            if (type === 'image') {
                                this.selectedPage.background.imageUrl = e.target.result;
                            } else if (type === 'gif') {
                                this.selectedPage.background.gifUrl = e.target.result;
                            }
                        };
                        reader.readAsDataURL(file);
                    }
                },

                getPageBackgroundStyle() {
                    if (this.selectedPage && this.selectedPage.background) {
                        const { type, color, imageUrl, gifUrl, gifLoop, gradientStart, gradientEnd, gradientDirection, videoUrl, videoVolume, videoLoop, imagePosition, imageSize } = this.selectedPage.background;
                        const style = {};

                        if (type === 'color') {
                            style.backgroundColor = color;
                        } else if (type === 'image' && imageUrl) {
                            style.backgroundImage = `url(${imageUrl})`;
                            style.backgroundSize = imageSize || 'cover';
                            style.backgroundPosition = imagePosition || 'center';
                            style.backgroundRepeat = 'no-repeat';
                        } else if (type === 'gif' && gifUrl) {
                            style.backgroundImage = `url(${gifUrl})`;
                            style.backgroundSize = 'cover';
                            style.backgroundPosition = 'center';
                            style.backgroundRepeat = 'no-repeat';
                        } else if (type === 'gradient') {
                            style.background = `linear-gradient(${gradientDirection}, ${gradientStart}, ${gradientEnd})`;
                        } else if (type === 'video' && videoUrl) {
                            // For video backgrounds, we'll use a poster image or fallback
                            style.backgroundImage = `url(${videoUrl})`;
                            style.backgroundSize = 'cover';
                            style.backgroundPosition = 'center';
                            style.backgroundRepeat = 'no-repeat';
                        }

                        return style;
                    }
                    return {};
                },

                // Resize functionality
                resizing: false,
                resizeStartX: 0,
                resizeStartY: 0,
                resizeStartWidth: 0,
                resizeStartHeight: 0,
                resizeStartComponentX: 0,
                resizeStartComponentY: 0,
                resizeDirection: '', // 'n', 's', 'e', 'w', 'ne', 'nw', 'se', 'sw'
                
                startResize(event, component, direction) {
                    event.stopPropagation();
                    event.preventDefault();
                    this.resizing = true;
                    this.resizeDirection = direction;
                    
                    // Convert screen coordinates to canvas coordinates
                    const mousePos = this.screenToCanvas(event.clientX, event.clientY);
                    
                    this.resizeStartX = mousePos.x;
                    this.resizeStartY = mousePos.y;
                    this.resizeStartWidth = component.width;
                    this.resizeStartHeight = component.height;
                    this.resizeStartComponentX = component.x;
                    this.resizeStartComponentY = component.y;
                    
                    document.addEventListener('mousemove', this.handleResize.bind(this));
                    document.addEventListener('mouseup', this.stopResize.bind(this));
                },
                
                handleResize(event) {
                    if (!this.resizing) return;
                    
                    event.preventDefault();
                    
                    // Convert screen coordinates to canvas coordinates
                    const mousePos = this.screenToCanvas(event.clientX, event.clientY);
                    
                    const deltaX = mousePos.x - this.resizeStartX;
                    const deltaY = mousePos.y - this.resizeStartY;
                    
                    // Find the component being resized
                    const component = this.components.find(c => c.id === this.selectedComponent?.id);
                    if (!component) return;
                    
                    // Use the current canvas resolution
                    const canvasWidth = this.canvasWidth;
                    const canvasHeight = this.canvasHeight;
                    
                    // Apply resize based on direction
                    if (this.resizeDirection.includes('e')) {
                        // Resize from right edge - only change width
                        const newWidth = Math.max(50, this.resizeStartWidth + deltaX);
                        component.width = Math.min(newWidth, canvasWidth - component.x);
                    }
                    if (this.resizeDirection.includes('w')) {
                        // Resize from left edge - change width and adjust x position
                        const newWidth = Math.max(50, this.resizeStartWidth - deltaX);
                        let newX = this.resizeStartComponentX + deltaX;
                        
                        // Snap to grid if enabled
                        if (this.snapToGrid) {
                            const snapped = this.snapToGridPosition(newX, component.y);
                            newX = snapped.x;
                        }
                        
                        // Ensure component doesn't go outside left boundary
                        if (newX >= 0) {
                            component.width = newWidth;
                            component.x = newX;
                        }
                    }
                    if (this.resizeDirection.includes('s')) {
                        // Resize from bottom edge - only change height
                        const newHeight = Math.max(50, this.resizeStartHeight + deltaY);
                        component.height = Math.min(newHeight, canvasHeight - component.y);
                    }
                    if (this.resizeDirection.includes('n')) {
                        // Resize from top edge - change height and adjust y position
                        const newHeight = Math.max(50, this.resizeStartHeight - deltaY);
                        let newY = this.resizeStartComponentY + deltaY;
                        
                        // Snap to grid if enabled
                        if (this.snapToGrid) {
                            const snapped = this.snapToGridPosition(component.x, newY);
                            newY = snapped.y;
                        }
                        
                        // Ensure component doesn't go outside top boundary
                        if (newY >= 0) {
                            component.height = newHeight;
                            component.y = newY;
                        }
                    }
                    
                    // Final boundary check to ensure component stays within canvas
                    if (component.x < 0) component.x = 0;
                    if (component.y < 0) component.y = 0;
                    if (component.x + component.width > canvasWidth) component.width = canvasWidth - component.x;
                    if (component.y + component.height > canvasHeight) component.height = canvasHeight - component.y;
                },
                
                stopResize() {
                    this.resizing = false;
                    this.resizeDirection = '';
                    document.removeEventListener('mousemove', this.handleResize.bind(this));
                    document.removeEventListener('mouseup', this.stopResize.bind(this));
                },

                // Rotation functionality
                rotating: false,
                rotateStartX: 0,
                rotateStartY: 0,
                rotateStartAngle: 0,
                rotateCenterX: 0,
                rotateCenterY: 0,
                
                startRotate(event, component) {
                    event.stopPropagation();
                    event.preventDefault();
                    this.rotating = true;
                    
                    // Get component center coordinates relative to the transformed canvas
                    const componentRect = event.currentTarget.closest('.component-container').getBoundingClientRect();
                    const componentCenterPos = this.screenToCanvas(componentRect.left + componentRect.width / 2, componentRect.top + componentRect.height / 2);
                    
                    this.rotateCenterX = componentCenterPos.x;
                    this.rotateCenterY = componentCenterPos.y;
                    
                    // Calculate initial angle using transformed coordinates
                    const mousePos = this.screenToCanvas(event.clientX, event.clientY);
                    
                    this.rotateStartX = mousePos.x;
                    this.rotateStartY = mousePos.y;
                    this.rotateStartAngle = component.data.rotation || 0;
                    
                    document.addEventListener('mousemove', this.handleRotate.bind(this));
                    document.addEventListener('mouseup', this.stopRotate.bind(this));
                },
                
                handleRotate(event) {
                    if (!this.rotating) return;
                    
                    event.preventDefault();
                    
                    // Convert screen coordinates to canvas coordinates
                    const mousePos = this.screenToCanvas(event.clientX, event.clientY);
                    
                    // Find the component being rotated
                    const component = this.components.find(c => c.id === this.selectedComponent?.id);
                    if (!component) return;
                    
                    // Calculate angle from center to mouse position
                    const deltaX = mousePos.x - this.rotateCenterX;
                    const deltaY = mousePos.y - this.rotateCenterY;
                    const currentAngle = Math.atan2(deltaY, deltaX) * 180 / Math.PI;
                    
                    // Calculate angle from center to start position
                    const startDeltaX = this.rotateStartX - this.rotateCenterX;
                    const startDeltaY = this.rotateStartY - this.rotateCenterY;
                    const startAngle = Math.atan2(startDeltaY, startDeltaX) * 180 / Math.PI;
                    
                    // Calculate rotation difference
                    let rotationDiff = currentAngle - startAngle;
                    
                    // Normalize to 0-360 range
                    let newRotation = this.rotateStartAngle + rotationDiff;
                    while (newRotation < 0) newRotation += 360;
                    while (newRotation >= 360) newRotation -= 360;
                    
                    // Update component rotation
                    component.data.rotation = Math.round(newRotation);
                },
                
                stopRotate() {
                    this.rotating = false;
                    document.removeEventListener('mousemove', this.handleRotate.bind(this));
                    document.removeEventListener('mouseup', this.stopRotate.bind(this));
                },
                
                // Canvas Zoom and Pan Functions
                handleCanvasZoom(event) {
                    event.preventDefault();
                    const delta = event.deltaY > 0 ? 0.9 : 1.1;
                    const newZoom = Math.max(0.1, Math.min(3, this.canvasZoom * delta));
                    
                    // Get mouse position relative to canvas
                    const rect = event.currentTarget.getBoundingClientRect();
                    const mouseX = event.clientX - rect.left;
                    const mouseY = event.clientY - rect.top;
                    
                    // Calculate zoom center
                    const zoomCenterX = (mouseX - this.canvasOffset.x) / this.canvasZoom;
                    const zoomCenterY = (mouseY - this.canvasOffset.y) / this.canvasZoom;
                    
                    // Update offset to keep zoom center under mouse
                    this.canvasOffset.x = mouseX - zoomCenterX * newZoom;
                    this.canvasOffset.y = mouseY - zoomCenterY * newZoom;
                    
                    this.canvasZoom = newZoom;
                },
                
                startCanvasDrag(event) {
                    // Completely disable canvas drag if any component interaction is happening
                    if (this.isComponentDragging || this.resizing || this.rotating) {
                        console.log('Canvas drag blocked - component interaction in progress');
                        return;
                    }
                    
                    // Only start canvas drag if we're not over a component and not in preview mode
                    if (event.button === 0 && !this.isDragging && !this.isPreviewMode) {
                        // Check if we're clicking on a component or its controls
                        const target = event.target;
                        const isOverComponent = target.closest('.component-container') || 
                                              target.closest('.resize-handle') || 
                                              target.closest('[data-component]') ||
                                              target.closest('.rotate-handle');
                        
                        // Also check if we're over UI panels that shouldn't trigger canvas drag
                        const isOverUI = target.closest('.properties-panel') || 
                                       target.closest('.component-library') ||
                                       target.closest('.canvas-toolbar') ||
                                       target.closest('.page-navigation') ||
                                       target.closest('.main-navigation') ||
                                       target.closest('.pages-sidebar') ||
                                       target.closest('[role="dialog"]') ||
                                       target.closest('.modal') ||
                                       target.closest('.popup');
                        
                        // Only allow canvas drag if we're actually over the canvas area
                        const isOverCanvas = target.closest('.canvas-container') && 
                                           !target.closest('.component-container') &&
                                           !target.closest('.resize-handle') &&
                                           !target.closest('.rotate-handle');
                        
                        if (!isOverComponent && !isOverUI && isOverCanvas) {
                            this.isDragging = true;
                            this.dragStart.x = event.clientX - this.canvasOffset.x;
                            this.dragStart.y = event.clientY - this.canvasOffset.y;
                            event.currentTarget.style.cursor = 'grabbing';
                            event.preventDefault();
                        }
                    }
                },
                
                handleCanvasDrag(event) {
                    if (this.isDragging) {
                        this.canvasOffset.x = event.clientX - this.dragStart.x;
                        this.canvasOffset.y = event.clientY - this.dragStart.y;
                    }
                },
                
                stopCanvasDrag() {
                    this.isDragging = false;
                    if (this.$refs.canvas) {
                        this.$refs.canvas.style.cursor = 'grab';
                    }
                },
                
                zoomIn() {
                    this.canvasZoom = Math.min(3, this.canvasZoom * 1.2);
                },
                
                zoomOut() {
                    this.canvasZoom = Math.max(0.1, this.canvasZoom / 1.2);
                },
                
                fitToPage() {
                    // Calculate the scale to fit the canvas in the viewport
                    const container = this.$refs.canvasContainer;
                    if (container) {
                        const containerRect = container.getBoundingClientRect();
                        const rulerPadding = this.showGuides ? 48 : 0; // 24px on each side
                        const scaleX = (containerRect.width - rulerPadding - 100) / this.canvasWidth;
                        const scaleY = (containerRect.height - rulerPadding - 100) / this.canvasHeight;
                        const scale = Math.min(scaleX, scaleY, 1); // Don't scale up beyond 100%
                        
                        this.canvasZoom = scale;
                        this.canvasOffset.x = 0;
                        this.canvasOffset.y = 0;
                    }
                },
                
                fitToScreen() {
                    // Calculate the scale to fill the screen (may crop some content)
                    const container = this.$refs.canvasContainer;
                    if (container) {
                        const containerRect = container.getBoundingClientRect();
                        const deviceFrameDims = this.getDeviceFrameDimensions();
                        const rulerPadding = this.showGuides ? 48 : 0; // 24px on each side
                        
                        // Calculate zoom to fill the container (may crop some content)
                        const zoomX = (containerRect.width - rulerPadding) / deviceFrameDims.width;
                        const zoomY = (containerRect.height - rulerPadding) / deviceFrameDims.height;
                        const zoom = Math.max(zoomX, zoomY) * 0.95; // 95% to add small margin
                        
                        this.canvasZoom = Math.max(0.1, Math.min(zoom, 3)); // Limit zoom between 10% and 300%
                        this.canvasOffset.x = 0;
                        this.canvasOffset.y = 0;
                    }
                },
                
                resetCanvas() {
                    this.canvasZoom = 1;
                    this.canvasOffset.x = 0;
                    this.canvasOffset.y = 0;
                },
                
                // Accordion functionality
                toggleAccordionSection(section) {
                    if (this.openAccordionSection === section) {
                        this.openAccordionSection = null; // Close if already open
                    } else {
                        this.openAccordionSection = section; // Open new section, close others
                    }
                },

                // Canvas zoom and pan state
                canvasZoom: 1,
                canvasOffset: { x: 0, y: 0 },
                
                // Grid System
                showGrid: true,
                snapToGrid: true,
                gridSize: 20,
                
                // Guide System (Scena-style)
                showGuides: true,
                guideSize: 20,
                guides: {
                    horizontal: [],
                    vertical: []
                },
                guideColor: 'rgba(0, 123, 255, 0.8)',
                guideSnapDistance: 10,
                
                // Mouse tracking for measurements
                mouseX: 0,
                mouseY: 0,
                mouseCanvasX: 0,
                mouseCanvasY: 0,
                
                // UI state
                showComponentLibrary: true,
                showPropertiesPanel: false,
                showBackgroundPreview: false,
                
                // Accordion state for component properties
                openAccordionSection: 'position', // Default open section
                
                // Data
                pages: [],
                components: [],
                nextId: 1,
                nextPageId: 1,
                
                // Clock preset system
                applyClockPreset(preset) {
                    if (!this.selectedComponent || this.selectedComponent.type !== 'clock') return;
                    
                    const presets = {
                        'digital-modern': {
                            style: 'digital-modern',
                            backgroundColor: 'transparent',
                            textColor: '#1f2937',
                            borderColor: '#d1d5db',
                            borderWidth: 0,
                            borderRadius: '0px',
                            padding: 16,
                            shadow: false,
                            showSeconds: true,
                            showDate: true,
                            showDay: true,
                            timeFormat: '12h'
                        },
                        'digital-minimal': {
                            style: 'digital-minimal',
                            backgroundColor: 'transparent',
                            textColor: '#374151',
                            borderColor: 'transparent',
                            borderWidth: 0,
                            borderRadius: '0px',
                            padding: 8,
                            shadow: false,
                            showSeconds: false,
                            showDate: true,
                            showDay: false,
                            timeFormat: '24h'
                        },
                        'digital-bold': {
                            style: 'digital-bold',
                            backgroundColor: '#1f2937',
                            textColor: '#ffffff',
                            borderColor: '#000000',
                            borderWidth